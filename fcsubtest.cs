	SUBROUTINE MCKO(RESID,SPAC,REQ,DIFF,M,N)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
//
	CHARACTER*1 FT
	CHARACTER*3 PLOT
//
	IF(M.LE.2) THEN
		REQ=38800.;
	ELSE IF(M.EQ.3) THEN
		REQ=38800.-((N/(62.+MDAYS(5)))*32700.);
	ELSE IF(M.EQ.4) THEN
		REQ=38800.-(((31.+N)/(62.+MDAYS(5)))*32700.);
	ELSE IF(M.EQ.5) THEN
		REQ=38800.-(((62.+N)/(62.+MDAYS(5)))*32700.);
	ELSE IF(M.EQ.6) THEN
		REQ=6100.-((N/31.)*6100.);
	ELSE IF(M.GE.7) THEN
		REQ=0.0;
	END IF
//
l_100:	RETURN
	END
//
	SUBROUTINE AGWA(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION FREQ(12,31)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
	DATA IPASS /0/
//
	IF(FINAL.EQ.'YES') THEN
		IF(CB.EQ.'AGWA         ') THEN
			IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:			FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON THE RESIDUAL FORECAST.  THE INDIVIDUAL'/'  REQUIREMENT AT',
       ' AGENCY VALLEY AND WARM SPRINGS ALSO CONSIDERS THE FILLING',
       /'  SCHEDULES.')
		ELSE IF((CB.EQ.'WARO         ').OR.(CB.EQ.'BEUO         ')) THEN
			IF(PLOT.EQ.'NO ') WRITE(IO4,2)
l_2:			FORMAT(//2X,'* BASED ON FORECAST'
       ,10X,'# BASED ON FILLING SCHEDULE')
		END IF
		GO TO 100
	END IF
//
	IPASS=IPASS+1;
	IF(IPASS.EQ.1) THEN
		DO 200 M=1,12;
		DO 150 N=1,31;
		FREQ(M,N)=998877.
l_150:		CONTINUE
l_200:		CONTINUE
	END IF
//
	IF(CB.EQ.'AGWA         ') THEN
		IF(MO.LE.3) THEN
			REQ=0.;
		ELSE IF((MO.GE.4).AND.(MO.LE.9)) THEN
			IF(RESID.EQ.998877.) GO TO 500
			IF(RESID.LT.225000.) THEN
				REQ=(0.4*RESID)-48000.
			ELSE
				REQ=(0.181053*RESID)-1263.
			END IF
			IF(REQ.LT.0.) THEN
				REQ=0.;
			ELSE IF(REQ.GT.128000.) THEN
				REQ=128000.;
			END IF
		ELSE IF(MO.GE.10) THEN
			REQ=0.;
		END IF
		FREQ(MO,ND)=REQ
		GO TO 500
	ELSE IF(CB.EQ.'WARO         ') THEN
		IF(MO.LE.5) THEN
			REQ=54134.;
		ELSE IF(MO.EQ.6) THEN
			REQ=54134.-((ND/31.)*31890.);
		ELSE IF(MO.EQ.7) THEN
			REQ=22244.-((ND/36.)*16555.);
		ELSE IF(MO.EQ.8) THEN
			IF(ND.LE.6) THEN
				REQ=22244.-(((ND+30.)/36.)*16555.);
			ELSE
				REQ=5689.-(((ND-6.)/25.)*5689.);
			END IF
		ELSE IF(MO.GE.9) THEN
			REQ=0.;
		END IF
//
//	RESID IS -998877. FOR RULE CURVE LINE PLOTTING ONLY
//
		IF(RESID.EQ.-998877.) GO TO 500
//
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE IF(((FREQ(MO,ND)*2.)/3.).GT.REQ) THEN
			REQ=(FREQ(MO,ND)*2.)/3.
			FT='*'
		ELSE
			FT='#'
		END IF
//
		GO TO 500
	ELSE IF(CB.EQ.'BEUO         ') THEN
		IF(MO.LE.4) THEN
			REQ=10000.;
		ELSE IF(MO.EQ.5) THEN
			REQ=10000.-(ND/(MDAYS(5)+31.))*10000.;
		ELSE IF(MO.EQ.6) THEN
			REQ=10000.-((ND+MDAYS(5))/(MDAYS(5)+31.))*10000.;
		ELSE IF(MO.GE.7) THEN
			REQ=0.;
		END IF
//
//	RESID IS -998877. FOR RULE CURVE LINE PLOTTING ONLY
//
		IF(RESID.EQ.-998877.) GO TO 500
//
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE IF(((FREQ(MO,ND)*1.)/3.).GT.REQ) THEN
			REQ=(FREQ(MO,ND)*1.)/3.
			FT='*'
		ELSE
			FT='#'
		END IF
//
		GO TO 500
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//     ------------------------------------------------------
       SUBROUTINE WODI(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,QU,FC)
//     ------------------------------------------------------
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
//
	DIMENSION FC(12),FCA(12)
//
//     average month-july natural runoff
//
l_       DATA FCA /134200.,130200.,126100.,121500.,117200.,113100:.,
l_     1 105200.,75600.,39400.,12000.,0.,0:./
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'* APR 1-SEP 30, BASED ON FORECAST'/
       '  # SEP 30-APR 15, BASED ON FILLING SCHEDULE'/
       ,2X,'$ MAR 1-JUL 31, BASED ON MEAN DAILY INFLOW')
		GO TO 1000
	END IF
//
	REQFC=998877.;
	REQFIL=998877.;
	REQQU=998877.;
//
//	SPACE BASED ON FORECAST
//
	IF(MO.LE.6) THEN
		REQFC=0.;
		GO TO 200
	END IF
//
	PC=998877.;
	DO 100 M=4,MO;
	IF(FC(M).NE.998877.) THEN
		PC=FC(M)/FCA(M)	;
	END IF
l_100:	CONTINUE
	IF((PC.EQ.998877.).OR.(RESID.EQ.998877.)) GO TO 1000
//
	FCSEP=RESID+(PC*7800.)	;
	IF(FCSEP.GE.130000.) THEN
		REQFC=30000.;
	ELSE IF((FCSEP.GE.80000.).AND.(FCSEP.LT.130000.)) THEN
		REQFC=(((FCSEP-80000.)/50000.)*25000.)+5000.
	ELSE IF((FCSEP.GE.60000.).AND.(FCSEP.LT.80000.)) THEN
		REQFC=((FCSEP-60000.)/20000.)*5000.
	ELSE IF(FCSEP.LT.60000.) THEN
		REQFC=0.;
	END IF
//
//	SPACE BASED ON FILLING SCHEDULE
//
l_200:	IF(MO.EQ.1) THEN
		REQFIL=12000.-(ND/31.)*1000.;
	ELSE IF(MO.EQ.2) THEN
		REQFIL=11000.-(ND/30.)*2000.;
	ELSE IF(MO.EQ.3) THEN
		REQFIL=9000.-(ND/31.)*2000.;
	ELSE IF(MO.EQ.4) THEN
		REQFIL=7000.-(ND/31.)*2000.;
	ELSE IF(MO.EQ.5) THEN
		D=MDAYS(5);
		REQFIL=5000.-(ND/D)*1500.;
	ELSE IF(MO.EQ.6) THEN
		REQFIL=3500.-(ND/31.)*2500.;
	ELSE IF(MO.EQ.7) THEN
		IF(ND.LT.15) THEN
			REQFIL=1000.-(ND/15.)*1000.;
		ELSE
			REQFIL=0.;
		END IF
	ELSE IF(MO.GE.8) THEN
		REQFIL=0.;
	END IF
//
//	SPACE BASED ON MEAN DAILY INFLOW
//
	IF((MO.LE.5).OR.(MO.GE.10)) THEN
		REQQU=0.;
		GO TO 900
	END IF
//
	IF(QU.EQ.998877.) THEN
		GO TO 900
	ELSE IF(QU.LE.500.) THEN
		REQQU=0.;
	ELSE IF((QU.LE.600.).AND.(QU.GT.500.)) THEN
		REQQU=((QU-500.)/100.)*270.
	ELSE IF((QU.LE.800.).AND.(QU.GT.600.)) THEN
		REQQU=(((QU-600.)/200.)*1250.)+270.
	ELSE IF((QU.LE.1200.).AND.(QU.GT.800.)) THEN
		REQQU=(((QU-800.)/400.)*1590.)+1520.
	ELSE IF((QU.LE.1400.).AND.(QU.GT.1200.)) THEN
		REQQU=(((QU-1200.)/200.)*940.)+3110.
	ELSE IF((QU.LE.2000.).AND.(QU.GT.1400.)) THEN
		REQQU=(((QU-1400.)/600.)*3140.)+4050.
	ELSE IF(QU.GT.2000.) THEN
		REQQU=7190.;
	END IF
//
l_900:	IF((REQFC.EQ.998877.).OR.(REQFIL.EQ.998877.)
       .OR.(REQQU.EQ.998877.)) THEN
		GO TO 1000
	END IF
//
	REQ=REQFC;
	FT='*'
	IF(REQFIL.GT.REQ) THEN
		REQ=REQFIL;
		FT='#'
	END IF
	IF(REQQU.GT.REQ) THEN
		REQ=REQQU;
		FT='$'
	END IF
//
l_500:	CONTINUE
//
l_1000:	RETURN
	END
//
	SUBROUTINE SCOO(FINAL,RESID,SPAC,REQ,DIFF,M,N)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//'  The space requirement is based on the',
l_     1: ' filling schedule.  The mean snow water content at'/'  Saddle',
l_     2: ' Mountain and Seine Creek snow courses must also be',
l_     3 ' checked.'/7:X,'Snow water content:',
l_     3 '   5.00 inches     Space requirement:   5500 AF'/29:X,
l_     4 '6.25',33X,'9600'/28X,'10.00',32X,'16000:')
		GO TO 100
	END IF
//
	IF(M.EQ.1) THEN
		REQ=0.;
	ELSE IF(M.EQ.2) THEN
		REQ=20540.;
	ELSE IF(M.EQ.3) THEN
		REQ=20540.;
	ELSE IF(M.EQ.4) THEN
		IF(N.LE.15) THEN
			REQ=20540.;
		ELSE
			REQ=20540.-(((N-15.)/16.)*3540.);
		END IF
	ELSE IF(M.EQ.5) THEN
		DAYS=MDAYS(5);
		REQ=17000.-((N/DAYS)*11500.);
	ELSE IF(M.EQ.6) THEN
		REQ=5500.-((N/31.)*3500.);
	ELSE IF(M.EQ.7) THEN
		REQ=2000.-((N/30.)*2000.);
	ELSE IF(M.GE.8) THEN
		REQ=0.0;
	END IF
//
l_100:	RETURN
	END
//
	SUBROUTINE BUL(FINAL,RESID,SPAC,REQ,DIFF,MO,ND)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'* BASED ON FORECAST'
       ,10X,'# BASED ON FILLING SCHEDULE')
		GO TO 1000
	END IF
//
	REQFC=998877.;
	REQFIL=998877.;
//
//	SPACE BASED ON FORECAST
//
	IF((MO.LE.4).OR.(MO.GE.10)) THEN
		REQFC=0.;
	ELSE IF ((MO.GE.5).OR.(MO.LE.9)) THEN
		IF(RESID.EQ.998877.) THEN
			GO TO 1000
		END IF
		REQFC=(RESID-15000.)/2.0
		IF(REQFC.GT.30000.) REQFC=30000.;
	END IF
//
//	SPACE BASED ON FILLING SCHEDULE
//
l_200:	IF(MO.EQ.1) THEN
		REQFIL=0.0;
	ELSE IF((MO.GE.2).AND.(MO.LE.5)) THEN
		REQFIL=10000.;
	ELSE IF(MO.EQ.6) THEN
		REQFIL=10000.-((ND/46.)*10000.);
	ELSE IF(MO.EQ.7) THEN
		IF(ND.LE.15) THEN
			REQFIL=10000.-(((ND+31.)/46.)*10000.);
		ELSE IF(ND.GE.16) THEN
			REQFIL=0.0;
		END IF
	ELSE IF(MO.GE.8) THEN
		REQFIL=0.0;
	END IF
//
l_900:	IF((REQFC.EQ.998877.).OR.(REQFIL.EQ.998877.)) THEN
		GO TO 1000
	END IF
//
	IF((REQFC.EQ.0.0).AND.(REQFIL.EQ.0.0)) THEN
		REQ=0.0;
		GO TO 500
	END IF
//
	REQ=REQFIL;
	FT='#'
	IF(REQFC.GT.REQ) THEN
		REQ=REQFC;
		FT='*'
	END IF
//
l_500:	CONTINUE
//
l_1000:	RETURN
	END
//
//
	SUBROUTINE HRSI(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION FREQ(12,31),C1(36),C2(36),C3(36),C4(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1, C2, C3, AND C4 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 100 TO 500 KAF
	DATA C1 /-.8615714E+02, 0.5722038E+00, 0.4079687E+00
               ,-.1940498E-02, -.1167166E-02, -.7284199E-03
               ,0.2760540E-05, 0.2550345E-06, 0.3057543E-05
               ,0.2197219E-06, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.
       ,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 500 TO 1000 KAF
	DATA C2 /0.2500182E+03, -.1111612E+01, -.4806429E+00
               ,0.1068387E-02, 0.1595443E-02, 0.1139242E-03
               ,-.1020313E-05, -.3357045E-06, 0.1640095E-05
               ,-.1729406E-06, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.
       ,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 1000 TO 2000 KAF
	DATA C3 /-.8944948E+03, -.1622737E+02, 0.5566805E+01
               ,0.1434635E+00, -.1103879E-01, -.5668011E-02
               ,-.3463257E-03, -.4101270E-04, 0.1713805E-04
               ,0.1826452E-05, 0.3069055E-06, 0.4988640E-07
               ,-.4231745E-08, -.1663216E-09, 0.3636334E-08
       ,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR FORECAST 2000 TO 3000 KAF
	DATA C4 /0.2628724E+06, -.1546632E+03, -.5092813E+03
               ,-.8060875E+01, 0.1270598E+01, 0.3616040E+00
               ,0.3966251E-01, 0.2489565E-02, -.9807737E-03
               ,-.1193214E-03, -.6383417E-04, -.1908445E-04
               ,0.1951935E-06, 0.1994402E-07, 0.1305631E-05
               ,0.1533376E-07, 0.2887751E-07, -.7900014E-09
               ,-.1131489E-09, -.1501974E-10, -.1347248E-11
       ,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
	DATA IPASS /0/
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON MINIMUM WINTER FLOOD SPACE FROM NOV 1 TO'/'  MAR 31,'
       ,' AND ON RUNOFF FORECASTS FROM APR 1 TO JUL 1')
//		IF(PLOT.EQ.'NO ') WRITE(IO4,2)
l_2:		FORMAT(/2X,'* RESIDUAL GREATER THAN 3000000 AF')
		GO TO 100
	END IF
//
	IPASS=IPASS+1;
	IF(IPASS.EQ.1) THEN
		DO 200 M=1,12;
		DO 150 N=1,31;
		FREQ(M,N)=998877.
l_150:		CONTINUE
l_200:		CONTINUE
	END IF
//
	REQ=998877.;
	IF(CB.EQ.'HRSI         ') THEN
		IF(MO.EQ.1) THEN
			REQ=0.;
		ELSE IF((MO.GT.1).AND.(MO.LE.6)) THEN
			REQ=191000.;
		ELSE IF(JDAY.GE.275) THEN
			REQ=0.;
		ELSE IF((MO.GE.7).AND.(JDAY.LE.274)) THEN
			IF(RESID.EQ.998877.) GO TO 500
			IF(RESID.LE.0.) THEN
				REQ=0.;
				GO TO 450
			END IF
//
//	POLYNOMIAL FITTED WITH FORECAST IN THOUSAND ACRE-FEET
//
			RESIDM=RESID/1000.;
			IF(RESIDM.GT.3000.0) RESIDM=3000.0;
			IF(RESIDM.LT.150.0) RESIDM=150.0;
//
			IF(RESID.GT.3000000.) FT='*'
//
//	DETERMINE UPPER LIMIT OF FORECAST
//
			IF(JDAY.LE.245) THEN
				FCMAX=(-.3859409E+03) + (0.1481317E+03)*JDAY
        + (-.1026250E+01)*(JDAY**2) + (0.1868539E-02)*(JDAY**3)
        + 22.500	
				IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
			ELSE IF(JDAY.GT.245) THEN
				FCMAX=(0.3998327E+06) + (-.4531986E+04)*JDAY
        + (0.1735725E+02)*(JDAY**2) + (-.2240889E-01)*(JDAY**3)
        + 34.170
				IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
			END IF
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
			IF(RESID.LT.500000.) THEN
				NORDER=3;
				CALL POLY(NORDER,JDAY,RESIDM,C1,REQ)
//				REQ IS RETURNED IN 1000 ACRE-FEET
				REQ=REQ*1000.;
			ELSE IF((RESID.GE.500000.).AND.(RESID.LT.1000000.)) THEN
				NORDER=3;
				CALL POLY(NORDER,JDAY,RESIDM,C2,REQ)
				REQ=REQ*1000.;
			ELSE IF((RESID.GE.1000000.).AND.(RESID.LT.2000000.)) THEN
				NORDER=4;
				CALL POLY(NORDER,JDAY,RESIDM,C3,REQ)
				REQ=REQ*1000.;
			ELSE IF(RESID.GE.2000000.) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C4,REQ)
				REQ=REQ*1000.;
			END IF
//
			IF(JDAY.LE.244) THEN
				REQMAX=600000.;
			ELSE IF(JDAY.GE.245) THEN
				REQMAX=600000.-(600000.*((JDAY-245.)/29.));
			END IF
			IF(REQ.GT.REQMAX) REQ=REQMAX;
		END IF
//
l_450:		IF(REQ.LT.0.0) REQ=0.0;
		FREQ(MO,ND)=REQ
//
	ELSE IF(CB.EQ.'CSCI         ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.8;
		END IF
//
		GO TO 500
	ELSE IF(CB.EQ.'DED          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.2;
		END IF
//
		GO TO 500
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//	SUBROUTINE TO SOLVE UP TO 7TH ORDER POLYNOMIAL OF ONE DEPENDENT AND
//	TWO INDEPENDENT VARIABLES
//
	SUBROUTINE POLY(NORDER,JDAY,RESID,C,REQ)
//
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	CHARACTER*1 FT
	CHARACTER*3 PLOT
//
	DIMENSION C(36)
//
	X1=JDAY;
	X2=RESID;
	Y=0.;
//
	IF((NORDER.LE.0).OR.(NORDER.GT.7)) THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'*** POLYNOMIAL ORDER OUT OF BOUNDS'//)
		GO TO 1000
	END IF
//
//
	GO TO (10,20,30,40,50,60,70),NORDER
//	7TH ORDER
l_70:	Y = Y + C(29)*(X1**7) + C(30)*(X1**6)*X2;
        + C(31)*(X1**5)*(X2**2) + C(32)*(X1**4)*(X2**3)
        + C(33)*(X1**3)*(X2**4) + C(34)*(X1**2)*(X2**5)
        + C(35)*X1*(X2**6) + C(36)*(X2**7)
//	6TH ORDER
l_60:	Y = Y + C(22)*(X1**6) + C(23)*(X1**5)*X2 + C(24)*(X1**4)*(X2**2);
        + C(25)*(X1**3)*(X2**3) + C(26)*(X1**2)*(X2**4)
        + C(27)*X1*(X2**5) + C(28)*(X2**6)
//	5TH ORDER
l_50:	Y = Y + C(16)*(X1**5) + C(17)*(X1**4)*X2;
        + C(18)*(X1**3)*(X2**2) + C(19)*(X1**2)*(X2**3)
        + C(20)*X1*(X2**4) + C(21)*(X2**5)
//	4TH ORDER
l_40:	Y = Y + C(11)*(X1**4) + C(12)*(X1**3)*X2;
        + C(13)*X1*(X2**3) + C(14)*(X2**4) + C(15)*(X1**2)*(X2**2)
//	3RD ORDER
l_30:	Y = Y + C(7)*(X1**3) + C(8)*(X1**2)*X2 + C(9)*X1*(X2**2);
        + C(10)*(X2**3)
//	2ND ORDER
l_20:	Y = Y + C(4)*(X1**2) + C(5)*X1*X2 + C(6)*(X2**2);
//	1ST ORDER
l_10:	Y = Y + C(1) + C(2)*X1 + C(3)*X2;
//
	REQ=Y;
//
l_1000:	RETURN
	END
//
//
	SUBROUTINE HGH(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY,YEAR)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION FREQ(12,31),C1(36),C2(36),C3(36),C4(36)
	DIMENSION C5(36),C6(36),C7(36),C8(36),DAT(12)
//
	CHARACTER*1 FT,MARK(12)
	CHARACTER*3 FINAL,PLOT
	CHARACTER*4 YEAR
	CHARACTER*12 CB
	CHARACTER*9 PC
	INTEGER OCT1,FEB1,APR1,DAY
	REAL MAY_SEP
//
//	VARIABLES C1 TO C8 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST  0 TO 1.2 MAF, JULIAN .LE. 212
	DATA C1 /0.3508827E+07,-.5170219E+05,-.4539743E+06,0.5747170E+02
       ,0.5153698E+05,-.3901904E+07,0.2324559E+01,-.6168852E+03
       ,0.4456354E+05,0.7158618E+06,-.1276633E-01,0.2586108E+01
       ,-.5926535E+04,-.4433551E+05,-.1655108E+03,0.1986616E-04
       ,-.3656153E-02,0.1983242E+00,0.1212776E+02,0.1964514E+03
       ,0.6038170E+03,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 1.2 TO 2.0 MAF, JULIAN .LE. 212
	DATA C2 /-.1883715E+07,0.2663478E+05,0.2493637E+07,-.1384713E+03
       ,-.3168754E+05,-.1073649E+07,0.3468941E+00,0.1321087E+03
       ,0.1245122E+05,0.1424391E+06,-.5600451E-03,-.1724877E+00
       ,-.1173724E+04,-.7082917E+04,-.4725096E+02,0.6725021E-06
       ,-.3697732E-04,0.5925968E-01,0.2275291E+01,0.3876882E+02
       ,-.1112953E+03,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 2.0 TO 3.0 MAF, JULIAN .LE. 212
	DATA C3 /0.9519531E+06,-.1949724E+05,-.4168891E+06,0.1534610E+03
       ,0.7490511E+04,0.4806317E+05,-.5902477E+00,-.4697419E+02
       ,-.8267847E+03,0.3082846E+03,0.1155176E-02,0.1153214E+00
       ,-.4215051E+02,0.1020569E+04,0.5137330E+01,-.9554174E-06
       ,-.9579787E-04,-.7696064E-02,-.9054246E-01,0.7568606E+01
       ,-.2147217E+03,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR FORECAST 3.0 TO 3.6 MAF, JULIAN .LE. 212
	DATA C4 /-.1024050E+07,0.6815421E+04,0.1559936E+07,0.1497292E+03
       ,-.1445053E+05,-.8236323E+06,-.1038713E+01,-.9943090E+02
       ,0.7410813E+04,0.1539809E+06,0.4657306E-02,0.5612107E+00
       ,-.8970298E-01,0.3393439E+01,0.1710862E+02,-.1902867E-04
       ,-.4367610E-03,-.2108753E+00,0.5276331E+01,-.9456255E+03
       ,0.2046168E+02,0.1126853E-06,-.2069459E-04,0.2748406E-02
       ,-.1400461E+00,0.4386329E+01,0.1283170E+03,-.4124097E+02
       ,-.2691662E-09,0.6377483E-07,-.7166492E-05,0.3780015E-03
       ,-.1141029E-01,0.1814470E+00,-.1654156E+02,0.8615523E+02/
//	C5 FOR FORECAST 0 TO 1.2 MAF, JULIAN 213 TO 273
	DATA C5 /0.1073003E+06,-.2333859E+04,0.1825500E+05,0.2005984E+02
       ,-.2639268E+03,-.4822268E+04,-.8587362E-01,0.1662800E+01
       ,0.6695183E+01,0.4873309E+04,0.1835038E-03,-.4828937E-02
       ,-.1462079E+02,-.1699766E+04,0.5406075E-01,-.1566297E-06
       ,0.5314754E-05,-.1292110E-03,0.1561692E-01,0.1754132E+01
       ,0.2749237E+03,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C6 FOR FORECAST 1.2 TO 2.O MAF, JULIAN 213 TO 273
	DATA C6 /0.1692898E+06,-.3386458E+04,-.2676623E+05,0.2680173E+02
       ,0.4735490E+03,-.9278667E+03,-.1040942E+00,-.3570320E+01
       ,0.9498950E+02,-.4274157E+04,0.2000152E-03,0.1028648E-01
       ,-.3089570E+02,0.2501116E+04,-.9164533E-01,-.1520498E-06
       ,-.1098343E-04,0.1110259E-03,0.1390361E-02,0.4702100E+01
       ,-.4422179E+03,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C7 FOR FORECAST 2.0 TO 3.0 MAF, JULIAN 213 TO 273
	DATA C7 /-.2471573E+06,0.5187055E+04,-.1599136E+05,-.3684087E+02
       ,-.1063442E+04,0.6694424E+05,0.1279571E+00,0.6381142E+01
       ,0.1152219E+02,-.2758772E+05,-.2339293E-03,-.9753038E-02
       ,0.6924560E+02,0.3902151E+04,-.1109371E+01,0.1838171E-06
       ,0.2333668E-05,0.1461323E-02,0.6276526E-02,-.7289730E+01
       ,-.1739025E+03,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C8 FOR FORECAST 3.0 TO 3.6 MAF, JULIAN 213 TO 273
	DATA C8 /-.3972522E+06,0.1312136E+04,0.7533374E+06,0.4109423E+02
       ,-.1165772E+05,-.1239935E+06,-.3088671E+00,0.6916068E+02
       ,0.1442640E+04,0.7504496E+04,0.1635509E-03,-.1746764E+00
       ,-.4468516E-03,0.6573945E-01,-.6631697E+01,0.4214723E-05
       ,0.2458181E-03,-.6458848E-02,0.7629054E+00,-.3066075E+02
       ,0.4073336E+01,-.1447350E-07,0.9130984E-07,-.1327368E-04
       ,0.5712296E-02,-.2978033E+00,0.8514089E+01,-.1119091E+01
       ,0.1297987E-10,0.6935174E-09,-.2454171E-06,0.3302063E-04
       ,-.3255426E-02,0.1699677E+00,-.4547232E+01,0.4188538E+02/
	CALL IDATE(MONTH,DAY,IYR)
	IFEB=28;
//	IYEAR=IYR/4
//	IYEAR=IYEAR*4
//	IF(IYEAR .EQ. IYR)IFEB=29
	OCT1=1;
	NOV1=32;
	JAN1=93;
	FEB1=124;
	MAR1=124+IFEB;
	APR1=155+IFEB;
	MAY1=185+IFEB;
	JUL1=246+IFEB;
	JUN30=245+IFEB;
	CALL OPENMPOLL(1,1,IOS)
	PC='FMS       ' 
	CALL READMPOLL(1,CB,PC,YEAR,DAT,MARK,25,IOS)
	MAY_SEP=998877.;
	IF(JDAY .LT. FEB1)MAY_SEP=DAT(4)
	IF(JDAY .GE. FEB1 .AND. JDAY .LT. MAR1)MAY_SEP=DAT(5)
	IF(JDAY .GE. MAR1 .AND. JDAY .LT. APR1)MAY_SEP=DAT(6)
	IF(JDAY .GE. APR1 .AND. JDAY .LT. MAY1)MAY_SEP=DAT(7)
	IF(JDAY .GE. MAY1)MAY_SEP=DAT(8)
 	IF(DAT(4) .NE. 998877.)MAY_SEP=DAT(4)
	IF(DAT(5) .NE. 998877.)MAY_SEP=DAT(5)
	IF(DAT(6) .NE. 998877.)MAY_SEP=DAT(6)
	IF(DAT(7) .NE. 998877.)MAY_SEP=DAT(7)
	IF(DAT(8) .NE. 998877.)MAY_SEP=DAT(8)
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS BETWEEN FEB 16 AND JUN 30')
		GO TO 100
	END IF
//
	REQ=0.;
//
     
l_         iikarl = 1:;
l_           if(iikarl.EQ.1:) then
l_                req = 998877:.;
l_                if( JDAY.LT.MAY1.AND.MAY_SEP.NE.998877:.) then
                   req = HGH_SPACE(JDAY,MAY_SEP);
                end if
l_                go TO 500:
                endif


	IF((JDAY.GE.MAY1).AND.(JDAY.LE.JUN30)) THEN
         

		IF(RESID.EQ.998877.) THEN
			REQ=998877.;
			GO TO 500
		END IF
		IF(RESID.LE.0.) THEN
			GO TO 500
		END IF
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET
//
		FCMIN=.75
		RESIDM=RESID/1000000.;
//
//	DETERMINE MAXIMUM AND MINIMUM ALLOWABLE FORECASTS IN MILLION ACRE-FEET
//
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
		FCMAX=(-0.0027027)*JDAY + 4.2378378 + 0.033510
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
		IF(RESIDM.GT.3.6) RESIDM=3.6;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
//
l_                  IF(RESID.LE.1000000:.)THEN
				REQMAY1=((RESID*.000840))-385.
				RNU=JDAY-MAY1+1;
				RNU2=JUN30-MAY1+1;
				REQ=REQMAY1+(RNU/RNU2)*195.;
				REQ=REQ*1000. ;
				PRINT *,RNU,RNU2 
		ELSE IF((RESID.GT.1000000.).AND.(RESID.LT.1200000.)) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C5,REQ)
				REQ=REQ*1000.;
		ELSE IF((RESID.GE.1200000.).AND.(RESID.LT.2000000.)) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C6,REQ)
				REQ=REQ*1000.;
		ELSE IF((RESID.GE.2000000.).AND.(RESID.LT.3000000.)) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C7,REQ)
				REQ=REQ*1000.;
		ELSE IF(RESID.GE.3000000.) THEN
				NORDER=7;
				CALL POLY(NORDER,JDAY,RESIDM,C8,REQ)
				REQ=REQ*1000.;
		END IF
		IF(RESID .LT. 1150000.)REQ=REQ-200000.
		if(req.lt.0.) req=0.;
//
//
//
	ELSEIF(JDAY .GE. OCT1 .AND. JDAY .LT. NOV1)THEN
	         REQ=100000.*JDAY/31;
l_         ELSEIF(JDAY .GE. NOV1 .AND. JDAY .LT. JAN1:)THEN
l_                  REQ=100000:.;
	ELSEIF((JDAY.GE.JAN1).AND.(JDAY.LT.MAY1)) THEN
//		IF(MAY_SEP .EQ.998877.) THEN
//			REQ=998877.
//			GO TO 500
//		END IF
//		IF(MAY_SEP.LE.0.) THEN
//			GO TO 500
//		END IF
		IF(MAY_SEP .GE. 1800.)THEN
		  E1=1.0;
		  E2=682.;
		ELSEIF(MAY_SEP .GE. 1150. .AND. MAY_SEP .LT. 1800.)THEN
		  E1=.83
		  E2=376.;
		ELSEIF(MAY_SEP .GE. 1000. .AND. MAY_SEP .LT. 1150.)THEN
		  E1=2.5233;
		  E2=2323.33;
		ELSEIF(MAY_SEP .GE. 750. .AND. MAY_SEP .LT. 1000.)THEN
		  E1=.80
		  E2=600.;
		ENDIF
		REQMAY1=E1*MAY_SEP-E2;
		REQ=1.0*(REQMAY1-100.)*(JDAY-JAN1+1)/(MAY1-JAN1+1)+100.;
		REQ=REQ*1000.;
	END IF
	IF(REQ.GT.2980000.) REQ=2980000.;
	IF(REQ.LT.0.) REQ=0.;
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE LUC(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION FREQ(12,31),C1(36),C2(36),C3(36),C4(36)
       ,C5(36),C6(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C6 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 0.0 TO 1.0 MAF
	DATA C1 / 0.2620489E+05, -.8856747E+03, 0.1033052E+06,
                 0.8658031E+01, -.6949062E+03, -.1741583E+06,
                 -.3714327E-01, 0.2880631E-01, 0.1472510E+04,
                 0.7830318E+05, 0.7441098E-04, 0.6834296E-02,
                 -.6289412E+03, 0.4333641E+03, -.3444287E+01,
                 -.5712563E-07, -.1098067E-04, 0.2515385E-02,
                 0.7901094E+00, 0.9123464E+02, -.6966152E+04,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 1.0 TO 1.4 MAF
	DATA C2 / -.4093163E+05, 0.2787070E+03, 0.8969242E+05,
                 -.1118014E+01, -.3148316E+03, -.8618624E+05,
                 0.1984080E-02, 0.8252952E+00, 0.1215962E+03,
                 0.4107179E+05, -.1377449E-05, -.6241071E-03,
                 -.1348259E+02, -.7938775E+04, -.1735238E+00,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 1.4 TO 2.0 MAF
	DATA C3 / 0.1774870E+05, -.1966573E+04, -.2930248E+05,
                 0.2742160E+01, 0.5857731E+04, -.4403374E+05,
                 0.1905372E-01, -.1306729E+02, -.6213049E+04,
                 0.1065530E+06, 0.3360935E-04, -.5558892E-01,
                 0.2333512E+04, -.5244578E+05, 0.2227193E+02,
                 -.3242802E-07, -.8275629E-05, 0.3494661E-01,
                 -.1313848E+02, -.2095579E+02, 0.8229083E+03,
                 -.1182709E-09, 0.9131026E-07, -.2384032E-04,
                 -.3287137E-02, 0.2263192E+01, -.9289530E+02,
                 0.2635762E+04, 0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR FORECAST 2.0 TO 2.6 MAF
	DATA C4 / -.9398761E+06, 0.1654803E+04, 0.1929132E+07,
                 -.1796059E+01, -.2507918E+04, -.1592751E+07,
                 0.1119740E-02, 0.1826191E+01, 0.1444121E+04,
                 0.6601829E+06, 0.9760602E-05, -.3088621E-02,
                 -.3833619E+03, -.1370947E+06, -.3857866E+00,
                 -.1264370E-07, -.3258903E-06, 0.6331586E-03,
                 0.3746736E-02, 0.3973683E+02, 0.1139088E+05,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C5 FOR FORECAST 2.6 TO 3.3 MAF
	DATA C5 / -.4060545E+05, 0.6822858E+02, 0.5142430E+05,
                 0.3203356E+00, -.8188512E+02, -.2465227E+05,
                 0.6001313E-03, -.2910563E+00, 0.3605700E+02,
                 0.5221372E+04, -.8115930E-07, -.2668743E-03,
                 -.5713059E+01, -.3968723E+03, 0.7291998E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C6 FOR WINTER RULE CURVES
	DATA C6 / -.6235423E+03, 0.6834196E+00, 0.1932917E+03,
                 0.1383093E-02, 0.1177600E+01, 0.1081550E+03,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
	DATA IPASS /0/
//
//	USE LEAP YEAR JULIAN DAYS, CURVES FITTED USING FEB 29
//
	JLDAY=JLEAP(MO) + (ND-1);
//
	RDAY=JLDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS FROM JAN 1 TO JUL 13')
		GO TO 100
	END IF
//
	IPASS=IPASS+1;
	IF(IPASS.EQ.1) THEN
		DO 200 M=1,12;
		DO 150 N=1,31;
		FREQ(M,N)=998877.
l_150:		CONTINUE
l_200:		CONTINUE
	END IF
//
	REQ=998877.;
//
	IF(CB.EQ.'LUC          ') THEN
		IF(JLDAY.LE.31) THEN
			REQ=0.;
		ELSE IF((JLDAY.GE.32).AND.(JLDAY.LE.92)) THEN
			REQ=300000.;
		ELSE IF(JLDAY.GE.287) THEN
			REQ=0.;
		ELSE
			IF(RESID.EQ.998877.) GO TO 100
			IF(RESID.LE.300000.) THEN
				REQ=0.;
				GO TO 440
			END IF
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET,
//	SPACE IN THOUSAND ACRE-FEET
//
			RESIDM=RESID/1000000.;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
			IF(JLDAY.LE.151) THEN
				FCMIN= -.1298378E+02 + (0.5630042E+00)*RDAY
        + (-.7503586E-02)*(RDAY**2) + (0.4382517E-04)*(RDAY**3)
        + (-.9645393E-07)*(RDAY**4) - .05	
//
//				GO TO WINTER CURVES AT LINE 600
//
				IF(RESIDM.LT.FCMIN) GO TO 600
//
			ELSE IF((JLDAY.GE.152).AND.(JLDAY.LE.182)) THEN
				FCMIN= 0.4902566E+04 + (-.1468937E+03)*RDAY;
        + (0.1758321E+01)*(RDAY**2) + (-.1050563E-01)*(RDAY**3)
        + (0.3132722E-04)*(RDAY**4) + (-.3729692E-07)*(RDAY**5) - 0.05
			ELSE IF(JLDAY.GE.183) THEN
				FCMIN= -.3003798E+03 + (0.6986566E+01)*RDAY
        + (-.6406239E-01)*(RDAY**2) + (0.2908004E-03)*(RDAY**3)
        + (-.6546260E-06)*(RDAY**4) + (0.5849980E-09)*(RDAY**5) - 0.05
			END IF
			IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
			IF((JLDAY.GE.92).AND.(JLDAY.LE.253)) THEN
				FCMAX= 0.4592862E+01 + (-.1848866E-01)*RDAY;
        + (0.7062044E-04)*(RDAY**2) + (-.1787395E-06)*(RDAY**3) + 0.05
			ELSE IF((JLDAY.GE.254).AND.(JLDAY.LE.287)) THEN
				FCMAX= 0.2470340E+03 +(-.2667947E+01)*RDAY;
        + (0.9773824E-02)*(RDAY**2) + (-.1210674E-04)*(RDAY**3) + 0.05
			END IF
			IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
			IF(RESIDM.LT.1.0) THEN
				NORDER=5;
				CALL POLY(NORDER,JLDAY,RESIDM,C1,REQ)
			ELSE IF((RESIDM.GE.1.0).AND.(RESIDM.LT.1.4)) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C2,REQ)
			ELSE IF((RESIDM.GE.1.4).AND.(RESIDM.LT.2.0)) THEN
				NORDER=6;
				CALL POLY(NORDER,JLDAY,RESIDM,C3,REQ)
			ELSE IF((RESIDM.GE.2.0).AND.(RESIDM.LT.2.6)) THEN
				NORDER=5;
				CALL POLY(NORDER,JLDAY,RESIDM,C4,REQ)
			ELSE IF(RESIDM.GE.2.6) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C5,REQ)
			END IF
			REQ=REQ*1000.;
//
//	COMPARE MAX AND MIN REQUIREMENT FOR DATE
//
			IF(JLDAY.LE.253) THEN
				REQMAX=970000.;
			ELSE IF(JLDAY.GE.254) THEN
				REQMAX=970000.-(970000.*((JLDAY-253.5)/33.5));
			END IF
			IF(REQ.GT.REQMAX) REQ=REQMAX;
//
l_440:			IF((JLDAY.GE.92).AND.(JLDAY.LE.125)) THEN
				REQMIN=300000.;
			ELSE IF((JLDAY.GE.126).AND.(JLDAY.LE.151)) THEN
//
//	EQUATION FOR CURVED LINE BETWEEN WINTER AND OPERATIONAL LINES
//
				REQMIN= -.2589607E+05 + (0.8299303E+03)*RDAY
        + (-.9805053E+01)*(RDAY**2) + (0.5139273E-01)*(RDAY**3)
        + (-.1012404E-03)*(RDAY**4)
				REQMIN=REQMIN*1000.	;
//
			ELSE IF((JLDAY.GE.152).AND.(JLDAY.LE.182)) THEN
				REQMIN=50000.;
			ELSE
				REQMIN=0.0;
			END IF
			IF(REQ.LT.REQMIN) REQ=REQMIN;
//
		END IF
//
l_450:		IF(REQ.LT.0.0) REQ=0.0;
		FREQ(MO,ND)=REQ
		GO TO 500
//
//	WINTER CURVES -- JULIAN DATE IS GE 92 AND LE 151 TO GET HERE
//
l_600:		IF(RESID.EQ.998877.) GO TO 100
		IF(RESID.LE.1250000.) THEN
			REQ=150000.;
			GO TO 460
		END IF
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		FCMIN= 0.1899342E+01 + (-.4269122E-02)*RDAY - 0.02;
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST
//
		IF(JLDAY.LE.125) THEN
			FCMAX= 0.2110902E+01 + (-.4135473E-02)*RDAY + 0.02;
		ELSE
			FCMAX= -.7935411E+03 + (0.2326166E+02)*RDAY
        + (-.2547405E+00)*(RDAY**2) + (0.1238078E-02)*(RDAY**3)
        + (-.2254331E-05)*(RDAY**4) + 0.02
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		NORDER=2;
		CALL POLY(NORDER,JLDAY,RESIDM,C6,REQ)
//	REQ IS RETURNED IN 1000 ACRE-FEET
		REQ=REQ*1000.;
//
//	COMPARE MAX AND MIN REQUIREMENT FOR DATE
//
		IF(JLDAY.LE.125) THEN
			REQMAX=300000.;
		ELSE
//
//	EQUATION FOR CURVED LINE BETWEEN WINTER AND OPERATIONAL LINES
//
			REQMAX= -.2589607E+05 + (0.8299303E+03)*RDAY
        + (-.9805053E+01)*(RDAY**2) + (0.5139273E-01)*(RDAY**3)
        + (-.1012404E-03)*(RDAY**4)
			REQMAX=REQMAX*1000.	;
//
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		IF(REQ.LT.150000.) REQ=150000.;
//
l_460:		FREQ(MO,ND)=REQ
		GO TO 500
//
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE OCHO(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION FREQ(12,31),C1(36),C2(36),C3(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C3 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 5 TO 25 KAF
	DATA C1 / -.4484238E+02, 0.6342310E+00, 0.2156613E+01,
                 -.4231845E-02, -.1681058E-01, -.5731516E-01,
                 0.1404690E-04, 0.7183147E-04, 0.2359323E-03,
                 0.1105907E-02, -.1771491E-07, -.1012599E-06,
                 -.5505160E-06, -.1434116E-04, -.5431086E-06,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 25 TO 45 KAF
	DATA C2 / -.1446622E+02, 0.9527665E-01, 0.5121329E+00,
                 -.1322205E-03, -.8382235E-03, -.5902411E-02,
                 0.1756943E-06, 0.1189279E-05, 0.6048128E-05,
                 0.4250252E-04, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 45 TO 80 KAF
	DATA C3 / -.1093902E+04, 0.1142243E+02, 0.6667776E+02,
                 -.4709929E-01, -.5889097E+00, -.1540297E+01,
                 -.4536207E-05, 0.2719058E-02, 0.8810836E-02,
                 0.1852184E-01, 0.3808785E-06, -.4383118E-05,
                 -.4990263E-04, -.1209103E-03, -.3181490E-04,
                 -.6130911E-09, 0.1963292E-08, 0.2989919E-07,
                 0.1099041E-06, 0.8216902E-07, 0.3465322E-06,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
//	USE LEAP YEAR JULIAN DAYS, CURVES FITTED USING FEB 29
//
	JLDAY=JLEAP(MO) + (ND-1);
//
	RDAY=JLDAY;
//
       IF(FINAL.EQ.'YES') THEN
l_            IF(PLOT.EQ.'NO ') WRITE(IO4,1:)
l_1:           FORMAT(//'  THE SPACE REQUIREMENT IS BASED',
l_     1 ' ON MINIMUM WINTER FLOOD SPACE FROM NOV 15 TO'/'  JAN 31:',
l_     2 'AND ON RUNOFF FORECASTS BETWEEN FEB 1 AND MAY 31:')
l_            GO TO 100:
       END IF
//
	REQ=0.;
//
	IF((JLDAY.GE.46).AND.(JLDAY.LE.123)) THEN	
		REQ=16500.;
		GO TO 500
	ELSE IF((JLDAY.GE.124).AND.(JLDAY.LE.244)) THEN
		IF(RESID.EQ.998877.) THEN
			REQ=998877.;
			GO TO 500
		END IF
		IF(RESID.LE.0.)  GO TO 500
//
		RESIDM=RESID/1000.	;
//
		IF(RESIDM.LT.5.0) GO TO 500
//
//	DETERMINE MAXIMUM AND MINIMUM ALLOWABLE FORECASTS IN THOUSAND ACRE-FEET
//
		FCMIN= 0.2724232E+02 + (-.1125900E+00)*RDAY - 1.	;
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
		IF(JLDAY.LE.191) THEN
			FCMAX= 0.1144046E+03 + (-.2673338E+00)*RDAY + 1.;
		ELSE
			FCMAX= -.3172381E+05 + (0.5882542E+03)*RDAY +
        (-.4045913E+01)*(RDAY**2) + (0.1226819E-01)*(RDAY**3) +
        (-.1386642E-04)*(RDAY**4) + 1.
		END IF
//
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF((RESIDM.GE.5.).AND.(RESIDM.LT.25.)) THEN
			NORDER=4;
			CALL POLY(NORDER,JLDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.GE.25.).AND.(RESIDM.LT.45.)) THEN
			NORDER=3;
			CALL POLY(NORDER,JLDAY,RESIDM,C2,REQ)
		ELSE IF(RESIDM.GE.45.) THEN
			NORDER=5;
			CALL POLY(NORDER,JLDAY,RESIDM,C3,REQ)
		END IF
//
		REQ=REQ*1000.	;
//
//	COMPUTE MAX AND MIN REQUIREMENT ALLOWED FOR DATE
//
		IF(JLDAY.LE.191) THEN
			REQMAX=16500.;
		ELSE
			REQMAX=16500.-(16500.*((RDAY-191.)/53.));
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		IF(REQ.LT.0.) REQ=0.;
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE PARW(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION FREQ(12,31),C1(36),C2(36),C3(36),C4(36)
	DIMENSION C5(36),C6(36),C7(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C7 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 0.3 TO 1.0 MAF
	DATA C1 / 0.1109560E+06, -.1709003E+04, -.2043243E+06,
                 0.1028179E+02, 0.2582269E+04, 0.1388863E+06,
                 -.2997615E-01, -.1207391E+02, -.1357852E+04,
                 -.4165279E+05, 0.4171740E-04, 0.2476025E-01,
                 0.2877916E+03, 0.4883215E+04, 0.4355216E+01,
                 -.2143420E-07, -.1885215E-04, -.4507801E-02,
                 -.5149085E+00, -.1342502E+02, -.4965170E+03,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 1.0 TO 1.5 MAF
	DATA C2 / 0.4429578E+04, -.2656818E+02, -.1181141E+05,
                 0.1472904E+00, 0.2576233E+02, 0.1220596E+05,
                 -.3045877E-03, -.9391103E-01, -.4090894E+01,
                 -.6225407E+04, 0.1997294E-06, 0.9676750E-04,
                 -.5048302E+00, 0.1256373E+04, 0.1259472E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C3 FOR FORECAST 1.5 TO 2.0 MAF
	DATA C3 / -.4458465E+03, -.3773547E+01, 0.5591508E+03,
                 0.1488101E-01, 0.6029553E+01, -.6501628E+03,
                 -.1225078E-04, -.1360269E-01, 0.3366012E+00,
                 0.1116898E+03, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR FORECAST 2.0 TO 2.5 MAF
	DATA C4 / 0.1760358E+05, -.1600311E+03, -.1921436E+05,
                 0.6728423E+00, 0.1053466E+03, 0.8614510E+04,
                 -.1476281E-02, -.2336704E+00, -.2491359E+02,
                 -.1949913E+04, 0.1558184E-05, 0.1248815E-03,
                 0.1773569E+01, 0.1884846E+03, 0.3320309E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C5 FOR FORECAST 2.5 TO 3.0 MAF
	DATA C5 / -.3730689E+05, -.1632870E+03, 0.6359967E+05,
                 0.3494307E+00, 0.1339270E+03, -.3868780E+05,
                 -.8427248E-03, -.8415160E-01, -.4117960E+02,
                 0.1013998E+05, 0.1974121E-05, -.2497429E-03,
                 0.3300799E+01, -.9628217E+03, 0.3819282E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C6 FOR FORECAST 3.0 TO 3.5 MAF
	DATA C6 / 0.1813404E+06, 0.1086976E+02, -.2238807E+06,
                 0.1655268E+01, -.1969748E+03, 0.1084924E+06,
                 -.5066282E-02, -.1627048E+00, 0.7283908E+02,
                 -.2357083E+05, 0.4907922E-05, 0.4523103E-03,
                 -.6863996E+01, 0.1904919E+04, -.1769582E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C7 FOR FORECAST 3.5 TO 4.5 MAF
	DATA C7 / -.3564023E+05, 0.2830115E+03, 0.2419347E+05,
                 -.8130284E+00, -.1491407E+03, -.6210791E+04,
                 -.3434927E-03, 0.4842202E+00, 0.1935497E+02,
                 0.7670286E+03, 0.8057803E-06, -.9523943E-04,
                 0.5515501E-01, -.4808295E+02, -.5955431E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//
	DATA IPASS /0/
//
//	USE LEAP YEAR JULIAN DAYS, CURVES FITTED USING FEB 29
//
	JLDAY=JLEAP(MO) + (ND-1);
//
	RDAY=JLDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON MINIMUM WINTER FLOOD SPACE FROM NOV 1 TO'/'  FEB 14',
       ' AND ON RUNOFF FORECASTS FROM FEB 15 TO JUN 29')
	END IF
//
	IPASS=IPASS+1;
	IF(IPASS.EQ.1) THEN
		DO 200 M=1,12;
		DO 150 N=1,31;
		FREQ(M,N)=998877.
l_150:		CONTINUE
l_200:		CONTINUE
	END IF
//
	REQ=998877.;
	IF(CB.EQ.'PARW         ') THEN
		IF(MO.EQ.1) THEN
			REQ=0.;
		ELSE IF((MO.GE.2).AND.(MO.LE.4)) THEN
			REQ=300000.;
		ELSE IF((JLDAY.GE.124).AND.(JLDAY.LE.138)) THEN
			REQ=300000.-135000.*((RDAY-123.)/15.);
		ELSE IF(JLDAY.GE.274) THEN
			REQ=0.;
		ELSE
			IF(RESID.EQ.998877.) GO TO 500
			IF(RESID.LE.300000.) THEN
				REQ=0.;
				GO TO 450
			END IF
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET
//
			RESIDM=RESID/1000000.;
//
//	DETERMINE UPPER LIMIT OF FORECAST
//
			FCMAX=4.5;
			IF(JLDAY.GE.189) THEN
				FCMAX= (-.6279136E+03) + (0.1514036E+02)*RDAY
        + (-.1417456E+00)*(RDAY**2) + (0.6520555E-03)*(RDAY**3)
        + (-.1479089E-05)*(RDAY**4) + (0.1323989E-08)*(RDAY**5) + 0.1
			END IF
			IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE LOWER LIMIT OF FORECAST
//
			FCMIN=0.3;
			IF(JLDAY.LE.257) THEN	
				FCMIN= (-.3849030E+02) + (0.1154475E+01)*RDAY
        + (-.1279417E-01)*(RDAY**2) + (0.6873253E-04)*(RDAY**3)
        + (-.1812469E-06)*(RDAY**4) + (0.1882977E-09)*(RDAY**5) - 0.05
			END IF
			IF(RESIDM.LT.FCMIN) THEN
				REQ=0.0;
				GO TO 450
			END IF
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
			IF(RESIDM.LT.1.0) THEN
				NORDER=5;
				CALL POLY(NORDER,JLDAY,RESIDM,C1,REQ)
//				REQ IS RETURNED IN 1000 ACRE-FEET
			ELSE IF((RESIDM.GE.1.0).AND.(RESIDM.LT.1.5)) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C2,REQ)
			ELSE IF((RESIDM.GE.1.5).AND.(RESIDM.LT.2.0)) THEN
				NORDER=3;
				CALL POLY(NORDER,JLDAY,RESIDM,C3,REQ)
			ELSE IF((RESIDM.GE.2.0).AND.(RESIDM.LT.2.5)) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C4,REQ)
			ELSE IF((RESIDM.GE.2.5).AND.(RESIDM.LT.3.0)) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C5,REQ)
			ELSE IF((RESIDM.GE.3.0).AND.(RESIDM.LT.3.5)) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C6,REQ)
			ELSE IF(RESIDM.GE.3.5) THEN
				NORDER=4;
				CALL POLY(NORDER,JLDAY,RESIDM,C7,REQ)
			END IF
			REQ=REQ*1000.;
//
			IF((JLDAY.GE.189).AND.(JLDAY.LE.273)) THEN
				REQMAX=(0.1641297E+06) + (-.3607629E+04)*RDAY
        + (0.3174292E+02)*(RDAY**2) + (-.1388515E+00)*(RDAY**3)
        + (0.3018380E-03)*(RDAY**4) + (-.2614509E-06)*(RDAY**5)
				REQMAX=REQMAX*1000.;
				IF(REQ.GT.REQMAX) REQ=REQMAX;
			END IF
			IF(REQ.LT.0.0) REQ=0.0;
		END IF
//
l_450:		FREQ(MO,ND)=REQ
//
	ELSE IF(CB.EQ.'KEE          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.13;
		END IF
		GO TO 500
	ELSE IF(CB.EQ.'KAC          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.12;
		END IF
		GO TO 500
	ELSE IF(CB.EQ.'CLE          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.42;
		END IF
		GO TO 500
	ELSE IF(CB.EQ.'BUM          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.13;
		END IF
		GO TO 500
	ELSE IF(CB.EQ.'RIM          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.20;
		END IF
		GO TO 500
	ELSE IF(CB.EQ.'YUMW         ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*(2./3.);
		END IF
		GO TO 500
	ELSE IF(CB.EQ.'NACW         ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*(1./3.);
		END IF
		GO TO 500
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE OWY(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION C1(36),C2(36),C3(36),C4(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C4 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 0.3 TO 0.6 MAF
	DATA C1 / 0.8353539E+03, -.3220694E+02, 0.6124706E+04,
                 0.1836387E+00, 0.6998058E+02, -.3894498E+05,
                 -.5801588E-03, -.1130900E+00, -.9042632E+02,
                 0.7361337E+05, 0.7857127E-06, 0.7376362E-05,
                 0.6210601E+02, -.4886921E+05, 0.4769277E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C2 FOR FORECAST 0.6 TO 1.0 MAF
	DATA C2 / -.4915548E+04, 0.8941726E+02, 0.4832805E+04,
                 -.4839503E+00, -.1169259E+03, 0.2262537E+04,
                 0.1023160E-02, 0.5054857E+00, 0.5203240E+02,
                 -.5686795E+04, -.8541827E-06, -.5173403E-03,
                 0.2022386E+01, 0.1796527E+04, -.1697612E+00,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C3 FOR FORECAST 1.0 TO 1.3 MAF
	DATA C3 / 0.6539237E+04, -.4094010E+02, -.1596646E+05,
                 0.1459697E+00, 0.5982585E+02, 0.1407748E+05,
                 -.9845537E-03, 0.2449603E+00, -.7480389E+02,
                 -.3628954E+04, 0.1966522E-05, -.4820127E-03,
                 0.2394105E+02, -.2503558E+03, -.2694852E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C4 FOR FORECAST 1.3 TO 2.0 MAF
	DATA C4 / -.6466438E+05, 0.3143772E+04, 0.8749650E+03,
                 -.4031205E+02, -.2411940E+04, 0.4025416E+05,
                 0.2862868E+00, 0.1891299E+02, 0.1401051E+04,
                 -.2436928E+05, -.1131954E-02, -.9545213E-01,
                 -.6746136E+03, 0.4023072E+04, -.4268675E+01,
                 0.2454535E-05, 0.1991609E-03, 0.2064046E-01,
                 -.1519903E+00, 0.2366892E+03, -.1840840E+02,
                 -.2287673E-08, -.1543428E-06, -.2460606E-04,
                 -.8435812E-03, 0.5636667E-01, -.3308925E+02,
                 -.1257874E+02, 0.,0.,0.,0.,0.,0.,0.,0./
//
	RDAY=JDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON MINIMUM WINTER FLOOD SPACE FROM OCT 1 TO'/'  JAN 7',
       ' AND ON RUNOFF FORECASTS FROM JAN 8 TO MAY 20')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JDAY.LT.99) THEN
		REQ=70000.;
	ELSE IF(JDAY.GE.232) THEN
		REQ=0.;
	ELSE
		IF(RESID.EQ.998877.) GO TO 500
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET
//
		RESIDM=RESID/1000000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JDAY.LE.202) THEN
			FCMAX= -.2107809E+01 + (0.9389292E-01)*RDAY
        + (-.6503002E-03)*(RDAY**2) + (0.1386280E-05)*(RDAY**3)
        + 0.025	
		ELSE IF(JDAY.GT.202) THEN
			FCMAX= -.4593813E+04 + (0.8536915E+02)*RDAY
        + (-.5937050E+00)*(RDAY**2) + (0.1832788E-02)*(RDAY**3)
        + (-.2120210E-05)*(RDAY**4) + 0.1	
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JDAY.LE.151) THEN
			FCMIN= 0.6450519E+02 + (-.1920029E+01)*RDAY;
        + (0.2268449E-01)*(RDAY**2) + (-.1223552E-03)*(RDAY**3)
        + (0.2499120E-06)*(RDAY**4) - 0.130	
		ELSE IF((JDAY.GT.151).AND.(JDAY.LE.182)) THEN
			FCMIN= 0.2821083E+01 + (-.2174675E-01)*RDAY;
        + (0.4134361E-04)*(RDAY**2) - 0.025	
		ELSE
			FCMIN=0.0;
		END IF
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(RESIDM.LT.0.3) THEN
			REQ=0.0;
		ELSE IF((RESIDM.GE.0.3).AND.(RESIDM.LT.0.6)) THEN
			NORDER=4;
			CALL POLY(NORDER,JDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.GE.0.6).AND.(RESIDM.LT.1.0)) THEN
			NORDER=4;
			CALL POLY(NORDER,JDAY,RESIDM,C2,REQ)
		ELSE IF((RESIDM.GE.1.0).AND.(RESIDM.LT.1.3)) THEN
			NORDER=4;
			CALL POLY(NORDER,JDAY,RESIDM,C3,REQ)
		ELSE IF(RESIDM.GE.1.3) THEN
			IF(RESIDM.GT.2.0) RESIDM=2.0;
			NORDER=6;
			CALL POLY(NORDER,JDAY,RESIDM,C4,REQ)
		END IF
//	REQ IS RETURNED IN 1000 AF
		REQ=REQ*1000.;
//
		IF(JDAY.LE.202) THEN
			REQMAX=715000.;
		ELSE
			REQMAX=715000.-(715000.*((JDAY-202.)/30.));
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		IF(JDAY.LE.151) THEN
			REQMIN=70000.;
		ELSE IF((JDAY.GT.151).AND.(JDAY.LE.182)) THEN
			REQMIN=70000.-(70000.*((JDAY-151.)/31.));
		ELSE
			REQMIN=0.0;
		END IF
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE RIR(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION C1(36),C2(36),C3(36),C4(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C4 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 40 TO 100 KAF
	DATA C1 / 0.1110822E+05, -.3225289E+03, 0.3986177E+02,
                 0.3176711E+01, 0.2481585E+00, -.5112289E+00,
                 -.1422907E-01, -.8063324E-02, 0.1210257E-01,
                 -.8814732E-02, 0.2986072E-04, 0.3910458E-04,
                 0.2185843E-04, 0.4477052E-04, -.5271293E-04,
                 -.2389309E-07, -.5388248E-07, 0.5396730E-07,
                 0.3895106E-07, -.1511450E-06, -.2173487E-07,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 100 TO 180 KAF
	DATA C2 / 0.1845201E+06, -.3856683E+04, -.7304516E+03,
                 0.3187493E+02, 0.1294454E+02, 0.6369028E+00,
                 -.1304802E+00, -.8348313E-01, -.1251055E-01,
                 0.1968556E-02, 0.2652763E-03, 0.2317221E-03,
                 -.1447142E-04, -.1760099E-05, 0.7190684E-04,
                 -.2147833E-06, -.2351761E-06, -.1187904E-06,
                 0.1149992E-07, 0.1765611E-07, -.2689531E-08,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 180 TO 300 KAF
	DATA C3 / -.4239079E+03, 0.2144115E+01, 0.4645582E+00,
                 -.1289846E-02, 0.2873115E-03, -.3544666E-04,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR FORECAST 150 TO 300 KAF, JULIAN DAY 148 TO 183
	DATA C4 / -.1807131E+03, 0.1567653E+00, -.9414787E-01,
                 0.4749358E-02, 0.2064179E-02, 0.1916893E-02,
                 -.9333269E-05, -.1873751E-05, -.4258386E-05,
                 -.1526132E-05, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
//	USE LEAP YEAR JULIAN DAY, CURVES FITTED USING FEB 29
//
	JLDAY=JLEAP(MO) + (ND-1);
//
	RDAY=JLDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON MINIMUM WINTER FLOOD SPACE FROM NOV 1 TO'/'  FEB 23',
       ' AND ON RUNOFF FORECASTS FROM FEB 24 TO JUN 30')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JLDAY.LE.61) THEN
		REQ=0.;
	ELSE IF((JLDAY.GE.62).AND.(JLDAY.LE.146)) THEN
		REQ=40000.;
	ELSE IF(JLDAY.GE.275) THEN
		REQ=0.;
	ELSE
		IF(RESID.EQ.998877.) GO TO 100
//
//	POLYNOMIAL FITTED WITH FORECAST IN THOUSAND ACRE-FEET
//
		RESIDM=RESID/1000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JLDAY.LE.184) THEN
			FCMAX= 300.;
		ELSE IF(JLDAY.GT.184) THEN
			FCMAX= (-.1521838E+05) + (0.2976782E+03)*RDAY
        + (-.2088624E+01)*(RDAY**2) + (0.6379806E-02)*(RDAY**3)
        + (-.7227562E-05)*(RDAY**4) + 10.0	
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JLDAY.LE.152) THEN
			FCMIN= 592. - 2.0*RDAY;
		ELSE IF((JLDAY.GT.152).AND.(JLDAY.LE.167)) THEN
			FCMIN= (0.1361721E+04) + (-.7060217E+01)*RDAY
		ELSE IF((JLDAY.GT.167).AND.(JLDAY.LE.256)) THEN
			FCMIN= (-.9375731E+05) + (0.2225088E+04)*RDAY
        + (-.2085817E+02)*(RDAY**2) + (0.9684959E-01)*(RDAY**3)
        + (-.2231239E-03)*(RDAY**4) + (0.2042537E-06)*(RDAY**5)
        - 5.0	
		ELSE
			FCMIN=0.;
		END IF
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(JLDAY.LE.183) THEN
			NORDER=3;
			CALL POLY(NORDER,JLDAY,RESIDM,C4,REQ)
		ELSE IF(RESIDM.LT.40.) THEN
			REQ=0.0;
		ELSE IF((RESIDM.GE.40.).AND.(RESIDM.LT.100.)) THEN
			NORDER=5;
			CALL POLY(NORDER,JLDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.GE.100.).AND.(RESIDM.LT.180.)) THEN
			NORDER=5;
			CALL POLY(NORDER,JLDAY,RESIDM,C2,REQ)
		ELSE IF(RESIDM.GE.180.) THEN
			IF(RESIDM.GT.300.) RESIDM=300.;
			NORDER=2;
			CALL POLY(NORDER,JLDAY,RESIDM,C3,REQ)
		END IF
//	REQ IS RETURNED IN 1000 AF
		REQ=REQ*1000.;
//
		IF(JLDAY.LE.218) THEN
			REQMAX=80000.;
		ELSE
			REQMAX= (-.2223296E+05) + (0.3738706E+03)*RDAY
        + (-.2353781E+01)*(RDAY**2) + (0.6610748E-02)*(RDAY**3)
        + (-.7003968E-05)*(RDAY**4)
			REQMAX=REQMAX*1000.	;
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		IF(JLDAY.LE.152) THEN
			REQMIN=40000.;
		ELSE IF((JLDAY.GT.152).AND.(JLDAY.LT.167)) THEN
			REQMIN=40000.-(40000.*((RDAY-152.)/15.));
		ELSE
			REQMIN=0.0;
		END IF
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE PRVO(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION C1(36),C2(36),C3(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C3 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 150 TO 250 KAF
	DATA C1 / -.1159569E+03, -.7494538E-01, 0.1718212E+01,
                 0.2480771E-02, -.4112439E-02, -.7655043E-02,
                 -.4206455E-05, 0.1612657E-06, 0.1556327E-04,
                 0.9631556E-05, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 250 TO 300 KAF
	DATA C2 / 0.1817478E+04, -.3080080E+01, -.1810195E+02,
                 0.1063700E-01, 0.1083587E-01, 0.6107551E-01,
                 -.1609074E-04, -.8554808E-05, -.1207781E-04,
                 -.6839360E-04, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 300 TO 350 KAF
	DATA C3 / 0.3884729E+05, -.2800809E+03, -.3409046E+03,
                 0.1882113E+01, 0.7745021E+00, 0.1369384E+01,
                 -.4442144E-02, -.5231528E-02, 0.1620532E-03,
                 -.2792669E-02, 0.3233599E-05, 0.7455046E-05,
                 -.1119487E-05, 0.2253057E-05, 0.2783665E-05,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//
//	USE LEAP YEAR JULIAN DAY, CURVES FITTED USING FEB 29
//
	JLDAY=JLEAP(MO) + (ND-1);
//
	RDAY=JLDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON MINIMUM WINTER FLOOD SPACE FROM NOV 15 TO'/'  FEB 15',
       ' AND ON RUNOFF FORECASTS FROM FEB 16 TO APR 30')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JLDAY.LE.46) THEN
		REQ=0.;
	ELSE IF((JLDAY.GE.47).AND.(JLDAY.LE.138)) THEN
		REQ=60000.;
	ELSE IF(JLDAY.GE.213) THEN
		REQ=0.;
	ELSE
		IF(RESID.EQ.998877.) GO TO 100
//
//	POLYNOMIAL FITTED WITH FORECAST IN THOUSAND ACRE-FEET
//
		RESIDM=RESID/1000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JLDAY.LE.155) THEN
			FCMAX= 350.;
		ELSE IF(JLDAY.GT.155) THEN
			FCMAX= 0.1244213E+06 + (-.3334440E+04)*RDAY;
        + (0.3578861E+02)*(RDAY**2) + (-.1916880E+00)*(RDAY**3)
        + (0.5123670E-03)*(RDAY**4) + (-.5473518E-06)*(RDAY**5)
        + 10.	
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JLDAY.LE.167) THEN
			FCMIN= 0.2210010E+05 + (-.4275148E+03)*RDAY;
        + (0.2820190E+01)*(RDAY**2) + (-.6253525E-02)*(RDAY**3)
        - 20.	
		ELSE IF((JLDAY.GT.167).AND.(JLDAY.LE.183)) THEN
			FCMIN= (-.4677001E+02) + (0.7180501E+01)*RDAY
        + (-.3293808E-01)*(RDAY**2) - 10.	
		ELSE IF((JLDAY.GT.183).AND.(JLDAY.LE.198)) THEN
			FCMIN=175.-(((RDAY-172.)/26.)*25.) - 1.	;
		ELSE
			FCMIN=0.;
		END IF
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(RESIDM.LT.150.) THEN
			REQ=0.0;
		ELSE IF((RESIDM.GE.150.).AND.(RESIDM.LT.250.)) THEN
			NORDER=3;
			CALL POLY(NORDER,JLDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.GE.250.).AND.(RESIDM.LT.300.)) THEN
			NORDER=3;
			CALL POLY(NORDER,JLDAY,RESIDM,C2,REQ)
		ELSE IF(RESIDM.GE.300.) THEN
			IF(RESIDM.GT.350.) RESIDM=350.;
			NORDER=4;
			CALL POLY(NORDER,JLDAY,RESIDM,C3,REQ)
		END IF
//	REQ IS RETURNED IN 1000 AF
		REQ=REQ*1000.;
//
		IF(JLDAY.LE.152) THEN
			REQMAX=60000.;
		ELSE
			REQMAX=60000.-(60000.*((RDAY-152.)/61.));
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		IF(JLDAY.LE.138) THEN
			REQMIN=60000.;
		ELSE IF((JLDAY.GT.138).AND.(JLDAY.LE.167)) THEN
			REQMIN=60000.-(50000.*((RDAY-138.)/29.));
		ELSE IF((JLDAY.GT.167).AND.(JLDAY.LE.183)) THEN
			REQMIN=10000.-(10000.*((RDAY-167.)/16.));
		ELSE
			REQMIN=0.0;
		END IF
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE ISLI(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION C1(36),C2(36),C3(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C3 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 70 TO 200 KAF
	DATA C1 / -.6272681E+02, 0.7486291E-01, 0.1396086E+00,
                 0.8149434E-03, -.9123627E-04, 0.1317843E-03,
                 -.1327247E-05, 0.3301552E-06, 0.8862577E-08,
                 -.2417610E-06, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 200 TO 260 KAF
	DATA C2 / 0.5177254E+05, -.9061632E+03, -.7003354E+03,
                 0.9787591E+01, 0.2902542E+01, 0.7709783E+01,
                 -.3483465E-01, -.8081342E-01, 0.4458736E-01,
                 -.6520805E-01, 0.5808315E-04, 0.2577467E-03,
                 -.3059664E-03, 0.3035507E-03, 0.1930053E-03,
                 -.5175278E-07, -.2910830E-06, -.6178292E-06,
                 -.2403402E-07, 0.6781891E-06, -.6881148E-06,
                 0.2304756E-10, 0.1137494E-09, 0.3884526E-09,
                 0.4456298E-09, -.2639357E-09, -.5010507E-09,
                 0.6018241E-09, 0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 260 TO 310 KAF
	DATA C3 / 0.3060651E+05, -.1749878E+02, -.4266400E+03,
                 0.1676022E+00, 0.4974794E-01, 0.2031852E+01,
                 -.2682282E-02, 0.6230653E-03, 0.2294313E-03,
                 -.2267712E-02, 0.9928626E-05, 0.1026823E-04,
                 -.2366086E-05, -.1113038E-04, -.6521197E-05,
                 -.1507054E-07, -.3274237E-07, -.8841616E-08,
                 0.1105790E-07, 0.8746976E-08, 0.3677776E-07,
                 0.1119146E-10, 0.1584746E-10, 0.4278209E-10,
                 -.1475154E-10, 0.2744681E-11, -.1240824E-10,
                 -.3200525E-10, 0.,0.,0.,0.,0.,0.,0.,0./
//
	RDAY=JDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS FROM JAN 1 TO JUN 30')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JDAY.LE.92) THEN	
		REQ=0.;
	ELSE IF(JDAY.GE.273) THEN
		REQ=0.;
	ELSE
		IF(RESID.EQ.998877.) GO TO 500
//
//	POLYNOMIAL FITTED WITH FORECAST IN THOUSAND ACRE-FEET
//
		RESIDM=RESID/1000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JDAY.LE.160) THEN
			FCMAX=310.0;
		ELSE IF((JDAY.GT.160).AND.(JDAY.LE.258)) THEN
			FCMAX= 0.2178131E+03 + (0.1485494E+01)*RDAY;
        + (-.5679988E-02)*(RDAY**2) + 5.0	
		ELSE IF(JDAY.GT.258) THEN
			FCMAX= 0.3003638E+04 + (-.1078286E+02)*RDAY;
        + 20.0	
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JDAY.LE.105) THEN
			FCMIN=250.0;
		ELSE IF((JDAY.GT.105).AND.(JDAY.LE.182)) THEN
			FCMIN= 0.3194028E+03 + (-.6540609E+00)*RDAY;
        - 4.0	
		ELSE IF(JDAY.GT.182) THEN
			FCMIN= 0.4823513E+03 + (-.1553152E+01)*RDAY;
        - 1.0	
		END IF
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(RESIDM.LT.70.) THEN
			REQ=0.0;
		ELSE IF((RESIDM.GE.70.).AND.(RESIDM.LT.200.)) THEN
			NORDER=3;
			CALL POLY(NORDER,JDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.GE.200.).AND.(RESIDM.LT.260.)) THEN
			NORDER=6;
			CALL POLY(NORDER,JDAY,RESIDM,C2,REQ)
		ELSE IF(RESIDM.GE.260.) THEN
			IF(RESIDM.GT.310.) RESIDM=310.;
			NORDER=6;
			CALL POLY(NORDER,JDAY,RESIDM,C3,REQ)
		END IF
//	REQ IS RETURNED IN 1000 AF
		REQ=REQ*1000.;
//
		IF(JDAY.LE.258) THEN
			REQMAX=22965.;
		ELSE
			REQMAX=22965.-(22965.*((RDAY-258.)/15.));
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		REQMIN=0.;
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE AMF(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION C1(36),C2(36),C3(36),C4(36),C5(36),C6(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C6 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST .324 TO 1.621 MAF
	DATA C1 / 0.2543059E+05, -.3428866E+03, -.1552698E+05,
                 0.1684974E+01, 0.1523100E+03, 0.3460399E+04,
                 -.3624161E-02, -.4942480E+00, -.2063531E+02,
                 -.4635302E+03, 0.2926982E-05, 0.5299716E-03,
                 0.5014860E+00, 0.7536395E+02, 0.3571201E-01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C2 FOR FORECAST 1.621 TO 2.432 MAF
	DATA C2 / -.1585138E+04, 0.8168469E+01, -.7866997E+02,
                 -.6043000E-02, -.1655585E+01, 0.2966105E+03,
                 0.4995125E-05, 0.1281012E-02, 0.2979784E+00,
                 -.5895735E+02, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 2.432 TO 3.243 MAF
	DATA C3 / -.3985701E+05, 0.1276197E+02, 0.5384321E+05,
                 0.1739899E-02, -.6273257E+01, -.2814377E+05,
                 0.1400210E-04, -.3888416E-02, 0.1855155E+01,
                 0.6582717E+04, -.1697024E-07, -.4910545E-06,
                 -.1903057E+00, -.5765561E+03, 0.7183992E-03,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C4 FOR FORECAST 3.243 TO 4.864 MAF
	DATA C4 / -.2440059E+04, -.7311859E+01, 0.1667118E+04,
                 -.9537287E-02, 0.1072013E+02, -.6586559E+03,
                 0.2806055E-04, 0.1496265E-02, -.2879364E+01,
                 0.1342829E+03, -.3031827E-07, -.2233208E-05,
                 0.2482577E+00, -.1010337E+02, -.5514850E-04,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C5 FOR FORECAST 4.864 TO 6.486 MAF
	DATA C5 / 0.1252231E+05, -.1722123E+02, -.9061291E+04,
                 -.2701734E-01, 0.1475560E+02, 0.2300417E+04,
                 0.4667610E-04, 0.6652587E-02, -.3051153E+01,
                 -.2467585E+03, -.6622678E-08, -.8345937E-05,
                 0.1981702E+00, 0.9663007E+01, -.3025041E-03,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0./
//	C6 FOR FORECAST 6.486 TO 7.621 MAF
	DATA C6 / -.9995583E+03, 0.5129767E+01, 0.1781917E+03,
                 -.1210892E-03, -.7971895E-01, 0.3033259E+01,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
	FT=' '
//
//	USE LEAP YEAR JULIAN DAY, CURVES FITTED USING FEB 29
//
	JLDAY=JLEAP(MO) + (ND-1);
//
	RDAY=JLDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS FROM JAN 1 TO JUL 10')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JLDAY.LE.92) THEN
		REQ=0.;
	ELSE IF(JLDAY.GE.284) THEN
		REQ=0.;
	ELSE
		IF(RESID.EQ.998877.) GO TO 100
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET
//
		RESIDM=RESID/1000000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JLDAY.LE.213) THEN
			FCMAX= 0.9787380E+01 + (-.2200372E-01)*RDAY;
        + .040	
		ELSE IF(JLDAY.GT.213) THEN
			FCMAX= 0.2178943E+03 + (-.2457171E+01)*RDAY;
        + (0.9520851E-02)*(RDAY**2) + (-.1256390E-04)*(RDAY**3)
        + 0.06	
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		FCMIN= 0.4084087E+01 + (-.6983217E-02)*RDAY;
        + (-.2317322E-04)*(RDAY**2) - 0.030	
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(RESIDM.LT.0.324) THEN
			REQ=0.0;
		ELSE IF((RESIDM.GE.0.324).AND.(RESIDM.LE.1.621)) THEN
			NORDER=4;
			CALL POLY(NORDER,JLDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.GT.1.621).AND.(RESIDM.LE.2.432)) THEN
			NORDER=3;
			CALL POLY(NORDER,JLDAY,RESIDM,C2,REQ)
		ELSE IF((RESIDM.GE.2.432).AND.(RESIDM.LT.3.243)) THEN
			NORDER=4;
			CALL POLY(NORDER,JLDAY,RESIDM,C3,REQ)
		ELSE IF((RESIDM.GE.3.243).AND.(RESIDM.LT.4.864)) THEN
			NORDER=4;
			CALL POLY(NORDER,JLDAY,RESIDM,C4,REQ)
		ELSE IF((RESIDM.GE.4.864).AND.(RESIDM.LT.6.486)) THEN
			NORDER=4;
			CALL POLY(NORDER,JLDAY,RESIDM,C5,REQ)
		ELSE IF(RESIDM.GE.6.486) THEN
			IF(RESIDM.GT.7.621) RESIDM=7.621;
			NORDER=2;
			CALL POLY(NORDER,JLDAY,RESIDM,C6,REQ)
		END IF
//	REQ IS RETURNED IN 1000 AF
		REQ=REQ*1000.;
//
		IF(JLDAY.LE.213) THEN
			REQMAX=972800.;
		ELSE
			REQMAX=(((284.-RDAY)/71.)*972800.)
		END IF
		IF(REQ.GT.REQMAX) THEN
			REQ=REQMAX;
			FT='*'
		END IF
//
		REQMIN=0.0;
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
	SUBROUTINE TDAO(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
	COMMON /BLK4/ JLEAP(12)
//
	DIMENSION C1(36),C2(36),C3(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C3 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR JULIAN DAY 128 TO 212
	DATA C1 / -.3454523E+07, 0.6716544E+05, 0.6135206E+05,
                 -.4307630E+03, -.1454697E+04, 0.2093440E+03,
                 0.1286831E+01, 0.7716505E+01, 0.1006950E+02,
                 -.1160278E+02, -.1895171E-02, -.1555249E-01,
                 -.1518159E-01, 0.8990685E-01, -.4538064E-01,
                 0.1106457E-05, 0.1142188E-04, 0.4737221E-04,
                 0.8467916E-04, -.5165096E-04, -.2226754E-03,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR JULIAN DAY 212 TO 243
	DATA C2 / 0.1185174E+07, 0.1911532E+05, -.1782766E+06,
                 -.5426570E+03, 0.3035675E+04, 0.1127021E+01,
                 0.3946126E+01, -.1934792E+02, -.1250143E+01,
                 0.3352693E+01, -.1195350E-01, 0.5497722E-01,
                 -.1401580E-01, -.2103256E-01, 0.7348823E-02,
                 0.1326699E-04, -.5830505E-04, -.1552151E-04,
                 0.3126445E-04, 0.1440254E-04, 0.6827127E-04,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR JULIAN DAY 243 TO 258
	DATA C3 / 0.7717503E+05, -.9120791E+03, -.3132414E+03,
                 0.3284314E+01, 0.3771191E+01, -.3603809E+00,
                 -.3809562E-02, -.7857144E-02, 0.4095238E-02,
                 -.6111111E-02, 0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
//	USE JDAY, CURVES FITTED WITHOUT FEB 29
//
	RDAY=JDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS FROM FEB 5 TO JUN 15')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JDAY.LE.128) THEN
		REQ=0.;
	ELSE IF(JDAY.GT.258) THEN
		REQ=0.;
	ELSE IF(RESID.EQ.998877.) THEN
		GO TO 100
	ELSE IF(RESID.LT.35000000.) THEN
		REQ=0.;
	ELSE
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET
//
		RESIDM=RESID/1000000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JDAY.LE.187) THEN
			FCMAX=90.;
		ELSE
			FCMAX= -.1064138E+03 + (0.3759295E+01)*RDAY
        + (-.2093048E-01)*(RDAY**2) + (0.3463787E-04)*(RDAY**3)
        + 0.25	
		END IF
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		IF(JDAY.LT.240) THEN
			FCMIN= 0.1535124E+03 + (-.4969394E+00)*RDAY;
        - 1.2	
		ELSE
			FCMIN=0.;
		END IF
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
		IF(RESIDM.LT.35.) THEN
			REQ=0.0;
			GO TO 100
		END IF
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(JDAY.LE.212) THEN
			NORDER=5;
			CALL POLY(NORDER,JDAY,RESIDM,C1,REQ)
		ELSE IF((JDAY.GT.212).AND.(JDAY.LE.243)) THEN
			NORDER=5;
			CALL POLY(NORDER,JDAY,RESIDM,C2,REQ)
		ELSE IF(JDAY.GT.243) THEN
			NORDER=3;
			CALL POLY(NORDER,JDAY,RESIDM,C3,REQ)
		END IF
//
//	REQ IS RETURNED IN 1000 AF
		REQ=REQ*1000.;
//
		IF(JDAY.LE.187) THEN
			REQMAX=((RDAY-128.)/59.)*5185000.
		ELSE
			REQMAX=5185000.;
		END IF
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		REQMIN=0.0;
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
l_100:	RETURN
	END
//
//
	SUBROUTINE PODO(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION C1(36),C2(36),C3(36),C4(36)
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C4 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST GT 75, LE 140
	DATA C1 / -.1415408E+03, 0.5907751E+00, 0.7401770E+00,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST GT 45, LE 75, JDAY LE 212
	DATA C2 / -.1406372E+03, 0.5099729E+00, 0.9271574E+00,
                 0.1550595E-03, 0.2837883E-03, -.1643553E-02,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR JDAY GT 212, JDAY LE 243
	DATA C3 / -.1093933E+03, 0.4420528E+00, 0.1378097E+01,
                 -.2344730E-03, -.1736158E-02, -.1828385E-02,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR  JDAY GT 243
	DATA C4 / -.6870718E+02, 0.2204624E+00, 0.1313511E+01,
                 -.6686473E-04, -.9111490E-03, -.3182002E-02,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//
	RDAY=JDAY;
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS FROM FEB 1 TO JUN 30')
		GO TO 100
	END IF
//
	REQ=998877.;
	IF(JDAY.LE.123) THEN
		REQ=0.;
	ELSE IF(JDAY.GT.273) THEN
		REQ=0.;
	ELSE
		IF(RESID.EQ.998877.) GO TO 100
//
//	POLYNOMIAL FITTED WITH FORECAST IN THOUSAND ACRE-FEET
//	AND SPACE FROM TOP OF SPILLWAY CREST SO SUBTRACT 17000 AF
//	FROM EQUATION RESULT TO GET ACTIVE SPACE REQUIRED
//
		RESIDM=RESID/1000.;
//
//	DETERMINE MAXIMUM ALLOWABLE FORECAST FOR DATE
//
		FCMAX= 0.3203080E+03 + (-.1765824E+01)*RDAY;
        + (0.2930358E-02)*(RDAY**2) + 2.5	
		IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE MINIMUM ALLOWABLE FORECAST FOR DATE
//
		FCMIN= 0.2798519E+03 + (-.1646025E+01)*RDAY;
        + (0.2661480E-02)*(RDAY**2) - 3.8	
		IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
		IF(RESIDM.LT.35.) THEN
			REQ=0.0;
		ELSE IF((RESIDM.GT.75.).AND.(JDAY.LE.212)) THEN
			NORDER=1;
			CALL POLY(NORDER,JDAY,RESIDM,C1,REQ)
		ELSE IF((RESIDM.LE.75.).AND.(JDAY.LE.212)) THEN
			NORDER=2;
			CALL POLY(NORDER,JDAY,RESIDM,C2,REQ)
		ELSE IF((JDAY.GT.212).AND.(JDAY.LE.243)) THEN
			NORDER=2;
			CALL POLY(NORDER,JDAY,RESIDM,C3,REQ)
		ELSE IF(JDAY.GT.243) THEN
			NORDER=2;
			CALL POLY(NORDER,JDAY,RESIDM,C4,REQ)
		END IF
//	REQ IS RETURNED IN 1000 AF
		REQ=(REQ*1000.) - 17000.
//
		REQMAX=21000.;
		IF(REQ.GT.REQMAX) REQ=REQMAX;
//
		REQMIN=0.;
		IF(REQ.LT.REQMIN) REQ=REQMIN;
//
	END IF
//
//
l_100:	RETURN
	END
//
//
//
	SUBROUTINE HEII(FINAL,RESID,SPAC,REQ,DIFF,MO,ND,CB,JDAY,QU)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	DIMENSION FREQ(12,31),C1(36),C2(36),C3(36),C4(36)
       ,C5(36),C6(36),C7(36),C8(36)
//
	CHARACTER*1 FT,SW
	CHARACTER*3 FINAL,PLOT
	CHARACTER*12 CB
//
//	VARIABLES C1 TO C8 ARE ARRAYS OF 36 CONSTANTS FOR 7TH
//	ORDER POLYNOMIAL WITH 2 INDEPENDENT VARIABLES
//
//	C1 FOR FORECAST 0.0 TO 2.0 MAF, SOLID LINES
	DATA C1 / 0.2732496E+07, -.4137334E+05, -.1748730E+07,
                 0.2444571E+03, 0.2255135E+05, 0.3339941E+06,
                 -.7026754E+00, -.1056425E+03, -.3770044E+04,
                 -.1734862E+04, 0.9537007E-03, 0.2284887E+00,
                 0.4900986E+03, -.1880725E+05, 0.9687719E+01,
                 -.4535382E-06, -.1957046E-03, -.7252447E-02,
                 -.7638204E+00, -.1551715E+02, 0.2791536E+04,
       0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C2 FOR FORECAST 2.0 TO 3.0 MAF, SOLID LINES
	DATA C2 / 0.4414417E+07, -.7709646E+05, -.1672336E+07,
                 0.5367591E+03, 0.2316068E+05, 0.2530366E+06,
                 -.1872473E+01, -.1171677E+03, -.2876382E+04,
                 -.1095922E+05, 0.3278796E-02, 0.2621460E+00,
                 0.1553547E+03, -.1467699E+04, 0.9723262E+01,
                 -.2313125E-05, -.2176605E-03, -.1109255E-01,
                 -.2479233E+00, -.3711380E+01, 0.1844146E+03,
       0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C3 FOR FORECAST 3.0 TO 4.0 MAF, SOLID LINES
	DATA C3 / 0.5458889E+07, -.9560746E+05, -.1993806E+07,
                 0.6257463E+03, 0.3305163E+05, 0.1225342E+06,
                 -.2044506E+01, -.1610914E+03, -.4275736E+04,
                 0.5432181E+05, 0.3339285E-02, 0.3475195E+00,
                 0.2414572E+03, -.1169312E+05, 0.1391696E+02,
                 -.2188152E-05, -.2790331E-03, -.1514571E-01,
                 -.3883353E+00, -.5159327E+01, 0.7412551E+03,
       0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C4 FOR FORECAST 4.0 TO 5.0 MAF, SOLID LINES
	DATA C4 / 0.2677154E+07, -.4007629E+05, 0.3779966E+06,
                 0.2110886E+03, -.9909582E+04, -.2468324E+06,
                 -.7182458E+00, 0.1435738E+03, -.6950178E+03,
                 0.7499052E+05, 0.1340817E-02, -.7578635E+00,
                 0.2629086E+02, -.8435569E+04, 0.2332237E+02,
                 -.5660334E-06, 0.2974865E-02, -.2394908E+00,
                 -.1711321E+01, -.1419181E+00, 0.2716898E+01,
                 0.2192680E-07, -.1254623E-04, 0.1117545E-02,
                 0.1144781E-02, 0.3221521E+00, -.2734603E+01,
                 0.8245128E+02, -.5360989E-10, 0.1683294E-07,
                 -.1018341E-05, -.4056985E-04, 0.9231297E-03,
                 -.3217657E-01, 0.3524133E+00, -.5327844E+01/
//	C5 FOR FORECAST 0.0 TO 1.6 MAF, DASHED LINES
	DATA C5 / -.9800420E+06, 0.1186070E+05, 0.2443704E+07,
                 -.2854054E+02, -.3751653E+05, -.1340385E+07,
                 -.2107297E+00, 0.2265976E+03, 0.1697974E+05,
                 0.3410913E+06, 0.1429130E-02, -.6671505E+00,
                 -.3097946E+04, -.5312998E+05, -.8130147E+02,
                 -.3173635E-05, 0.9400661E-03, 0.1765774E+00,
                 0.8809036E+01, 0.3985247E+03, 0.2174244E+00,
                 0.2489695E-08, -.4852203E-06, -.1495612E-03,
                 -.7416389E-02, -.7300475E+00, -.4743507E+01,
                 0.3294385E+03,0.,0.,0.,0.,0.,0.,0.,0./
//	C6 FOR FORECAST 1.6 TO 2.4 MAF, DASHED LINES
	DATA C6 / 0.2016650E+07, -.3392609E+05, -.1094372E+07,
                 0.2322561E+03, 0.1376442E+05, 0.2527884E+06,
                 -.8158282E+00, -.6256652E+02, -.2710551E+04,
                 -.1308289E+05, 0.1465047E-02, 0.1283532E+00,
                 0.2357658E+03, -.4103764E+04, 0.7985275E+01,
                 -.1070957E-05, -.1010523E-03, -.7691079E-02,
                 -.3743008E+00, -.5381875E+01, 0.5258290E+03,
       0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C7 FOR FORECAST 2.4 TO 3.0 MAF, DASHED LINES
	DATA C7 / 0.2781218E+07, -.3226288E+05, -.2521938E+07,
                 0.2159531E+03, 0.1200259E+05, 0.1378189E+07,
                 -.8157640E+00, -.3563940E+02, -.3611239E+04,
                 -.4147248E+06, 0.1575978E-02, 0.7412939E-01,
                 0.6695047E+03, 0.6391468E+05, 0.3714363E+01,
                 -.1224960E-05, -.6396350E-04, -.3049567E-02,
                 -.1674239E+00, -.5500902E+02, -.3888835E+04,
       0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0./
//	C8 FOR FORECAST 3.0 TO 3.5 MAF, DASHED LINES
	DATA C8 / -.1177453E+07, 0.8750648E+04, 0.8085729E+06,
                 -.3846826E+02, -.2390403E+04, -.2883397E+06,
                 0.8201498E-01, 0.5522213E+01, 0.3300466E+03,
                 0.5165357E+05, -.6751294E-04, -.5315239E-02,
                 -.2075434E+02, -.3634756E+04, -.2654084E+00,
       0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
       0.,0.,0./
//
	DATA IPASS /0/
//
	RDAY=JDAY;
//
	IF((FINAL.EQ.'YES').AND.(CB.EQ.'HEII         ')
       .AND.(PLOT.EQ.'NO ')) THEN
//		WRITE(IO4,1)
l_1:		FORMAT(//2X,'THE SPACE REQUIREMENT IS BASED',
       ' ON RUNOFF FORECASTS FROM MAR 1 TO JUL 23')
		WRITE(IO4,2)
l_2:		FORMAT(/'  * - RESIDUAL EXCEEDS UPPER LIMIT OF SOLID',
       ' LINES'/'  # - RESIDUAL EXCEEDS UPPER LIMIT OF DASHED LINES'/
       '  S - SOLID RULE CURVE LINES'/'  D - DASHED RULE CURVE LINES')
		GO TO 100
	END IF
//
	IF(FINAL.EQ.'MAN') IPASS=0	;
//
	IPASS=IPASS+1;
	IF(IPASS.EQ.1) THEN
		SW='S'	
		DO 200 M=1,12;
		DO 150 N=1,31;
		FREQ(M,N)=998877.
l_150:		CONTINUE
l_200:		CONTINUE
	END IF
//
	REQ=998877.;
//
	IF(CB.EQ.'HEII         ') THEN
//
	IF((M.LE.5).OR.(JDAY.GT.296)) THEN
		REQ=0.0;
		FT=' '
		GO TO 460
	END IF
//
//	USE DASHED LINES AFTER HEISE NATURAL EXCEEDS 20000 CFS
//
	IF((QU.GT.20000.).AND.(QU.NE.998877.)) SW='D'
//
	IF(JDAY.LE.212) GO TO 300	
	IF(JDAY.GT.273) GO TO 400	
	IF(SW.EQ.'S') GO TO 300
	IF(SW.EQ.'D') THEN
		IF(RESID.GT.3500000.) GO TO 300
		GO TO 400
	END IF
//
//****************************************
//****************************************
//
//	SOLID LINES
//
l_300:		FT='S'
		IF(MO.LE.5) THEN
			REQ=0.;
		ELSE IF(JDAY.GT.274) THEN
			REQ=0.;
		ELSE IF((MO.GE.6).AND.(MO.LE.9)) THEN
			IF(RESID.EQ.998877.) GO TO 500
			IF(RESID.LE.0.) THEN
				REQ=0.;
				GO TO 450
			END IF
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET,
//	SPACE IN THOUSAND ACRE-FEET
//
			RESIDM=RESID/1000000.;
			IF(RESIDM.GT.5.0) THEN
				RESIDM=5.0;
				FT='*'
			END IF
			IF(RESIDM.LT.1.1) RESIDM=1.1;
//
//	DETERMINE UPPER LIMIT OF FORECAST
//
			IF(JDAY.LE.254) THEN
				FCMAX=(-.1102856E+03)
        + (0.2244094E+01)*RDAY + (-.1582402E-01)*(RDAY**2)
        + (0.4835348E-04)*(RDAY**3) + (-.5470915E-07)*(RDAY**4)
        + .05	
			ELSE IF(JDAY.GT.254) THEN
				FCMAX=(0.1588789E+04)
        + (-.1769021E+02)*RDAY + (0.6593199E-01)*(RDAY**2)
        + (-.8211943E-04)*(RDAY**3) + .05
			END IF
			IF(RESIDM.GT.FCMAX) RESIDM=FCMAX;
//
//	DETERMINE LOWER LIMIT OF FORECAST
//
			FCMIN=(0.3612222E+04) + (-.1328018E+03)*RDAY
        + (0.2080931E+01)*(RDAY**2) + (-.1796936E-01)*(RDAY**3)
        + (0.9229604E-04)*(RDAY**4) + (-.2819059E-06)*(RDAY**5)
        + (0.4740021E-09)*(RDAY**6) + (-.3383871E-12)*(RDAY**7)
        - .05
			IF(RESIDM.LT.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
			IF(RESIDM.LT.2.0) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C1,REQ)
				REQ=REQ*1000.	;
			ELSE IF((RESIDM.GE.2.0).AND.(RESIDM.LT.3.0)) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C2,REQ)
				REQ=REQ*1000.;
			ELSE IF((RESIDM.GE.3.0).AND.(RESIDM.LT.4.0)) THEN
				NORDER=5;
				CALL POLY(NORDER,JDAY,RESIDM,C3,REQ)
				REQ=REQ*1000.;
			ELSE IF(RESIDM.GE.4.0) THEN
				NORDER=7;
				CALL POLY(NORDER,JDAY,RESIDM,C4,REQ)
				REQ=REQ*1000.;
			END IF
//
			IF(JDAY.LE.253) THEN
				REQMAX=1600000.;
			ELSE IF(JDAY.GE.254) THEN
				REQMAX=1600000.-(1600000.*((JDAY-254.)/43.));
			END IF
			IF(REQ.GT.REQMAX) REQ=REQMAX;
		END IF
//
l_450:		GO TO 460
//
//****************************************
//****************************************
//
//	DASHED LINES
//
l_400:		FT='D'
			IF(MO.LE.7) THEN
				REQ=0.;
			ELSE IF(JDAY.GT.296) THEN
				REQ=0.;
			ELSE IF((JDAY.GE.213).AND.(JDAY.LE.296)) THEN
				IF(RESID.EQ.998877.) GO TO 500
				IF(RESID.LE.0.) THEN
					REQ=0.;
					GO TO 460
				END IF
//
//	POLYNOMIAL FITTED WITH FORECAST IN MILLION ACRE-FEET,
//	SPACE IN THOUSAND ACRE-FEET
//
				RESIDM=RESID/1000000.;
//
//	DETERMINE UPPER LIMIT OF FORECAST
//
				FCMAX=3.5;
				IF(JDAY.GT.254) THEN
					FCMAX=(0.4544473E+05)
        + (-.7237153E+03)*RDAY + (0.4246358E+01)*(RDAY**2)
        + (-.1023208E-01)*(RDAY**3) + (0.5226553E-05)*(RDAY**4)
        + (0.4408460E-08)*(RDAY**5) + (0.4169652E-10)*(RDAY**6)
        + (-.8084307E-13)*(RDAY**7) + .05
				END IF
				IF(RESIDM.GT.FCMAX) THEN
					RESIDM=FCMAX;
					FT='#'
				END IF
//
//	DETERMINE LOWER LIMIT OF FORECAST
//
				FCMIN=(-.3564987E+04) + (0.7022069E+02)*RDAY
        + (-.5483933E+00)*(RDAY**2) + (0.2125519E-02)*(RDAY**3)
        + (-.4092761E-05)*(RDAY**4) + (0.3134584E-08)*(RDAY**5)
        - .05
				IF(RESIDM.LE.FCMIN) RESIDM=FCMIN;
//
//	COMPUTE SPACE REQUIREMENT FROM POLYNOMIAL EQUATION
//
				IF(RESIDM.LT.1.6) THEN
					NORDER=6;
					CALL POLY(NORDER,JDAY,RESIDM,C5,REQ)
//				REQ IS RETURNED IN 1000 ACRE-FEET
					REQ=REQ*1000.;
				ELSE IF((RESIDM.GE.1.6).AND.(RESIDM.LT.2.4)) THEN
					NORDER=5;
					CALL POLY(NORDER,JDAY,RESIDM,C6,REQ)
					REQ=REQ*1000.;
				ELSE IF((RESIDM.GE.2.4).AND.(RESIDM.LT.3.0)) THEN
					NORDER=5;
					CALL POLY(NORDER,JDAY,RESIDM,C7,REQ)
					REQ=REQ*1000.;
				ELSE IF(RESIDM.GE.3.0) THEN
					NORDER=4;
					CALL POLY(NORDER,JDAY,RESIDM,C8,REQ)
					REQ=REQ*1000.;
				END IF
//
				REQMAX=1600000.;
				IF(JDAY.GE.254) THEN
					REQMAX=1600000.-(1600000.*((JDAY-254.)/43.));
				END IF
				IF(REQ.GT.REQMAX) REQ=REQMAX;
			END IF
//
l_460:			IF(REQ.LT.0.0) REQ=0.0;
			FREQ(MO,ND)=REQ
//
//****************************************
//****************************************
//
	ELSE IF(CB.EQ.'JCK          ') THEN
		IF(FREQ(MO,ND).EQ.998877.) THEN
			REQ=998877.;
		ELSE
			REQ=FREQ(MO,ND)*0.25;
		END IF
//
		GO TO 500
	END IF
//
l_500:	CONTINUE
//
l_100:	RETURN
	END
//
//
//
	SUBROUTINE MFDO(FINAL,RESID,SPAC,REQ,DIFF,M,N)
//
	COMMON /BLK1/ MDAYS(12)
	COMMON /BLK2/ FT,PLOT
	COMMON /BLK3/ IO4,INT,IOT
//
	CHARACTER*1 FT
	CHARACTER*3 FINAL,PLOT
//
	IF(FINAL.EQ.'YES') THEN
		IF(PLOT.EQ.'NO ') WRITE(IO4,1)
l_1:		FORMAT(//2X,'SPACE REQUIREMENT BASED ON FILLING SCHEDULE',
       ' DATED SEPTEMBER 8, 1969')
		GO TO 100
	END IF
//
	IF((M.GE.1).AND.(M.LE.3)) THEN
		REQ=20000.;
	ELSE IF(M.EQ.4) THEN
		REQ=20000.-((N/(62.+MDAYS(5)))*18500.)	;
	ELSE IF(M.EQ.5) THEN
		REQ=20000.-(((31+N)/(62.+MDAYS(5)))*18500.);
	ELSE IF(M.EQ.6) THEN
		REQ=20000.-(((31+MDAYS(5)+N)/(62.+MDAYS(5)))*18500.);
	ELSE IF(M.EQ.7) THEN
		REQ=1500.-((N/30.)*1500.);
	ELSE IF(M.GE.8) THEN
		REQ=0.0;
	END IF
//
l_100:	RETURN
	END
//



//     Function HGH_Space returns the space requirement
//     between the months October through April 30
//     Will return -999 if the date is greater than April 30 

       Function HGH_Space(daynum, forecast)

       int daynum,col,row;
l_       real hghTable(11,11:),verticalPercent,horizontalPercent
//   
//    first column is forecast ,  first row is day number
//    where:  1 = october 1, 212 is April 30
//
       data hghTable /
l_     1 0,       1,30,31 , 61, 92,123,151,182, 197, 212:
l_     1,0,       0, 0,100,100,250,185,127, 63,  31,  0:
l_     1,1000,   0, 0,100,100,250,185,127, 63,  31,  0:
l_     1,1400,   0, 0,100,100,250,224,201, 175, 163, 150:
l_     1,1600,   0, 0,100,100,250,289,324, 363, 381, 400:
l_     1,2000,   0, 0,100,100,250,436,604, 790, 880, 970:
l_     1,2200,   0, 0,100,100,250,560,840, 1150,1300,1318:
l_     1,2500,   0, 0,100,100,250,723,1149,1622,1800,1818:
l_     1,2800,   0, 0,100,100,250,853,1397,2000,2100,2118:
l_     1,3680,   0, 0,100,100,250,956,1593,2299,2641,2982:
l_     1,9999999,0, 0,100,100,250,956,1593,2299,2641,2982:/

//      write(*,*) ' forecast = ',forecast
//      write(*,*) ' daynum = ', daynum

l_       if( (daynum.GT.212).OR.(daynum.LT.1:) ) then
l_        HGH_Space = -999:
l_        goto  l_1000;:
       endif 
//
//     find row and column to begin interpolation
//      
l_        do 10 col=2,10:;
l_         if(hghTable(col+1,1:).GE.daynum) then
l_            goto  l_11;: 
         endif
l_10:    continue
l_11:    continue
//      write(*,*) 'col is ',col
l_        do 12 row=2,10:;
l_         if(hghTable(1,row+1:).GE.forecast) then
l_            goto  l_13;: 
         endif
l_12:    continue
l_13:    continue
//      write(*,*) 'row is ',row
l_       verticalDistance = hghTable(1,row+1)-hghTable(1:,row);
l_       if(verticalDistance.LE.0) goto  l_900;:

l_       verticalPercent = (forecast-hghTable(1:,row))/verticalDistance

l_       horizontalDistance = hghTable(col+1,1) - hghTable(col,1:);
l_       if(horizontalDistance.LE.0) goto  l_900;:
        
l_       horizontalPercent = (daynum-hghTable(col,1:)  ) /horizontalDistance
       
l_       vertInterp1 =   (1:.-verticalPercent)*hghTable(col,row)
l_     1                + verticalPercent*hghTable(col,row+1:)
l_       vertInterp2 =   (1.-verticalPercent)*hghTable(col+1:,row)
l_     1                + verticalPercent*hghTable(col+1,row+1:)
 
l_       horzInterp = (1. - horizontalPercent) * vertInterp1:
l_     1               + horizontalPercent*vertInterp2: 


//       write(*,*) 'sol = ',horzInterp
l_         HGH_Space = horzInterp * 1000:.;
l_899     goto  l_1000;:
l_900:     Write(*,*) 'ERROR: hgh_rules.for  data in first row and column'
         write(*,*) ' of table must be increasing order'

l_1000:   continue
       End
